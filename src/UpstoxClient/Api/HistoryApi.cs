/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IHistoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetHistoricalCandleResponse</returns>
        GetHistoricalCandleResponse GetHistoricalCandleData (string instrumentKey, string interval, string toDate, string apiVersion);

        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetHistoricalCandleResponse</returns>
        ApiResponse<GetHistoricalCandleResponse> GetHistoricalCandleDataWithHttpInfo (string instrumentKey, string interval, string toDate, string apiVersion);
        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetHistoricalCandleResponse</returns>
        GetHistoricalCandleResponse GetHistoricalCandleData1 (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion);

        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetHistoricalCandleResponse</returns>
        ApiResponse<GetHistoricalCandleResponse> GetHistoricalCandleData1WithHttpInfo (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion);
        /// <summary>
        /// Intra day candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments for the present trading day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetIntraDayCandleResponse</returns>
        GetIntraDayCandleResponse GetIntraDayCandleData (string instrumentKey, string interval, string apiVersion);

        /// <summary>
        /// Intra day candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments for the present trading day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetIntraDayCandleResponse</returns>
        ApiResponse<GetIntraDayCandleResponse> GetIntraDayCandleDataWithHttpInfo (string instrumentKey, string interval, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetHistoricalCandleResponse</returns>
        System.Threading.Tasks.Task<GetHistoricalCandleResponse> GetHistoricalCandleDataAsync (string instrumentKey, string interval, string toDate, string apiVersion);

        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetHistoricalCandleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHistoricalCandleResponse>> GetHistoricalCandleDataAsyncWithHttpInfo (string instrumentKey, string interval, string toDate, string apiVersion);
        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetHistoricalCandleResponse</returns>
        System.Threading.Tasks.Task<GetHistoricalCandleResponse> GetHistoricalCandleData1Async (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion);

        /// <summary>
        /// Historical candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetHistoricalCandleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHistoricalCandleResponse>> GetHistoricalCandleData1AsyncWithHttpInfo (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion);
        /// <summary>
        /// Intra day candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments for the present trading day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetIntraDayCandleResponse</returns>
        System.Threading.Tasks.Task<GetIntraDayCandleResponse> GetIntraDayCandleDataAsync (string instrumentKey, string interval, string apiVersion);

        /// <summary>
        /// Intra day candle data
        /// </summary>
        /// <remarks>
        /// Get OHLC values for all instruments for the present trading day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetIntraDayCandleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIntraDayCandleResponse>> GetIntraDayCandleDataAsyncWithHttpInfo (string instrumentKey, string interval, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class HistoryApi : IHistoryApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoryApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// </summary>
        /// <returns></returns>
        public HistoryApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoryApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetHistoricalCandleResponse</returns>
        public GetHistoricalCandleResponse GetHistoricalCandleData (string instrumentKey, string interval, string toDate, string apiVersion)
        {
             ApiResponse<GetHistoricalCandleResponse> localVarResponse = GetHistoricalCandleDataWithHttpInfo(instrumentKey, interval, toDate, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetHistoricalCandleResponse</returns>
        public ApiResponse< GetHistoricalCandleResponse > GetHistoricalCandleDataWithHttpInfo (string instrumentKey, string interval, string toDate, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetHistoricalCandleData");

            var localVarPath = "/v2/historical-candle/{instrumentKey}/{interval}/{to_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (toDate != null) localVarPathParams.Add("to_date", this.Configuration.ApiClient.ParameterToString(toDate)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistoricalCandleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHistoricalCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHistoricalCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHistoricalCandleResponse)));
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetHistoricalCandleResponse</returns>
        public async System.Threading.Tasks.Task<GetHistoricalCandleResponse> GetHistoricalCandleDataAsync (string instrumentKey, string interval, string toDate, string apiVersion)
        {
             ApiResponse<GetHistoricalCandleResponse> localVarResponse = await GetHistoricalCandleDataAsyncWithHttpInfo(instrumentKey, interval, toDate, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetHistoricalCandleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetHistoricalCandleResponse>> GetHistoricalCandleDataAsyncWithHttpInfo (string instrumentKey, string interval, string toDate, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling HistoryApi->GetHistoricalCandleData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetHistoricalCandleData");

            var localVarPath = "/v2/historical-candle/{instrumentKey}/{interval}/{to_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (toDate != null) localVarPathParams.Add("to_date", this.Configuration.ApiClient.ParameterToString(toDate)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistoricalCandleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHistoricalCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHistoricalCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHistoricalCandleResponse)));
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetHistoricalCandleResponse</returns>
        public GetHistoricalCandleResponse GetHistoricalCandleData1 (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion)
        {
             ApiResponse<GetHistoricalCandleResponse> localVarResponse = GetHistoricalCandleData1WithHttpInfo(instrumentKey, interval, toDate, fromDate, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetHistoricalCandleResponse</returns>
        public ApiResponse< GetHistoricalCandleResponse > GetHistoricalCandleData1WithHttpInfo (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetHistoricalCandleData1");

            var localVarPath = "/v2/historical-candle/{instrumentKey}/{interval}/{to_date}/{from_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (toDate != null) localVarPathParams.Add("to_date", this.Configuration.ApiClient.ParameterToString(toDate)); // path parameter
            if (fromDate != null) localVarPathParams.Add("from_date", this.Configuration.ApiClient.ParameterToString(fromDate)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistoricalCandleData1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHistoricalCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHistoricalCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHistoricalCandleResponse)));
        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetHistoricalCandleResponse</returns>
        public async System.Threading.Tasks.Task<GetHistoricalCandleResponse> GetHistoricalCandleData1Async (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion)
        {
             ApiResponse<GetHistoricalCandleResponse> localVarResponse = await GetHistoricalCandleData1AsyncWithHttpInfo(instrumentKey, interval, toDate, fromDate, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Historical candle data Get OHLC values for all instruments across various timeframes. Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="toDate"></param>
        /// <param name="fromDate"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetHistoricalCandleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetHistoricalCandleResponse>> GetHistoricalCandleData1AsyncWithHttpInfo (string instrumentKey, string interval, string toDate, string fromDate, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new ApiException(400, "Missing required parameter 'toDate' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new ApiException(400, "Missing required parameter 'fromDate' when calling HistoryApi->GetHistoricalCandleData1");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetHistoricalCandleData1");

            var localVarPath = "/v2/historical-candle/{instrumentKey}/{interval}/{to_date}/{from_date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (toDate != null) localVarPathParams.Add("to_date", this.Configuration.ApiClient.ParameterToString(toDate)); // path parameter
            if (fromDate != null) localVarPathParams.Add("from_date", this.Configuration.ApiClient.ParameterToString(fromDate)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistoricalCandleData1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHistoricalCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHistoricalCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHistoricalCandleResponse)));
        }

        /// <summary>
        /// Intra day candle data Get OHLC values for all instruments for the present trading day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetIntraDayCandleResponse</returns>
        public GetIntraDayCandleResponse GetIntraDayCandleData (string instrumentKey, string interval, string apiVersion)
        {
             ApiResponse<GetIntraDayCandleResponse> localVarResponse = GetIntraDayCandleDataWithHttpInfo(instrumentKey, interval, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Intra day candle data Get OHLC values for all instruments for the present trading day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetIntraDayCandleResponse</returns>
        public ApiResponse< GetIntraDayCandleResponse > GetIntraDayCandleDataWithHttpInfo (string instrumentKey, string interval, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetIntraDayCandleData");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetIntraDayCandleData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetIntraDayCandleData");

            var localVarPath = "/v2/historical-candle/intraday/{instrumentKey}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntraDayCandleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIntraDayCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetIntraDayCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIntraDayCandleResponse)));
        }

        /// <summary>
        /// Intra day candle data Get OHLC values for all instruments for the present trading day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetIntraDayCandleResponse</returns>
        public async System.Threading.Tasks.Task<GetIntraDayCandleResponse> GetIntraDayCandleDataAsync (string instrumentKey, string interval, string apiVersion)
        {
             ApiResponse<GetIntraDayCandleResponse> localVarResponse = await GetIntraDayCandleDataAsyncWithHttpInfo(instrumentKey, interval, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Intra day candle data Get OHLC values for all instruments for the present trading day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentKey"></param>
        /// <param name="interval"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetIntraDayCandleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetIntraDayCandleResponse>> GetIntraDayCandleDataAsyncWithHttpInfo (string instrumentKey, string interval, string apiVersion)
        {
            // verify the required parameter 'instrumentKey' is set
            if (instrumentKey == null)
                throw new ApiException(400, "Missing required parameter 'instrumentKey' when calling HistoryApi->GetIntraDayCandleData");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling HistoryApi->GetIntraDayCandleData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling HistoryApi->GetIntraDayCandleData");

            var localVarPath = "/v2/historical-candle/intraday/{instrumentKey}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentKey != null) localVarPathParams.Add("instrumentKey", this.Configuration.ApiClient.ParameterToString(instrumentKey)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntraDayCandleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetIntraDayCandleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetIntraDayCandleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetIntraDayCandleResponse)));
        }

    }
}
