/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMarketQuoteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Market quotes and instruments - Full market quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetFullMarketQuoteResponse</returns>
        GetFullMarketQuoteResponse GetFullMarketQuote (string symbol, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - Full market quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetFullMarketQuoteResponse</returns>
        ApiResponse<GetFullMarketQuoteResponse> GetFullMarketQuoteWithHttpInfo (string symbol, string apiVersion);
        /// <summary>
        /// Market quotes and instruments - OHLC quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetMarketQuoteOHLCResponse</returns>
        GetMarketQuoteOHLCResponse GetMarketQuoteOHLC (string symbol, string interval, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - OHLC quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetMarketQuoteOHLCResponse</returns>
        ApiResponse<GetMarketQuoteOHLCResponse> GetMarketQuoteOHLCWithHttpInfo (string symbol, string interval, string apiVersion);
        /// <summary>
        /// Market quotes and instruments - LTP quotes.
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetMarketQuoteLastTradedPriceResponse</returns>
        GetMarketQuoteLastTradedPriceResponse Ltp (string symbol, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - LTP quotes.
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetMarketQuoteLastTradedPriceResponse</returns>
        ApiResponse<GetMarketQuoteLastTradedPriceResponse> LtpWithHttpInfo (string symbol, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Market quotes and instruments - Full market quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetFullMarketQuoteResponse</returns>
        System.Threading.Tasks.Task<GetFullMarketQuoteResponse> GetFullMarketQuoteAsync (string symbol, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - Full market quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetFullMarketQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFullMarketQuoteResponse>> GetFullMarketQuoteAsyncWithHttpInfo (string symbol, string apiVersion);
        /// <summary>
        /// Market quotes and instruments - OHLC quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetMarketQuoteOHLCResponse</returns>
        System.Threading.Tasks.Task<GetMarketQuoteOHLCResponse> GetMarketQuoteOHLCAsync (string symbol, string interval, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - OHLC quotes
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetMarketQuoteOHLCResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarketQuoteOHLCResponse>> GetMarketQuoteOHLCAsyncWithHttpInfo (string symbol, string interval, string apiVersion);
        /// <summary>
        /// Market quotes and instruments - LTP quotes.
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetMarketQuoteLastTradedPriceResponse</returns>
        System.Threading.Tasks.Task<GetMarketQuoteLastTradedPriceResponse> LtpAsync (string symbol, string apiVersion);

        /// <summary>
        /// Market quotes and instruments - LTP quotes.
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetMarketQuoteLastTradedPriceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarketQuoteLastTradedPriceResponse>> LtpAsyncWithHttpInfo (string symbol, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MarketQuoteApi : IMarketQuoteApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuoteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketQuoteApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuoteApi"/> class
        /// </summary>
        /// <returns></returns>
        public MarketQuoteApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketQuoteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketQuoteApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Market quotes and instruments - Full market quotes This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetFullMarketQuoteResponse</returns>
        public GetFullMarketQuoteResponse GetFullMarketQuote (string symbol, string apiVersion)
        {
             ApiResponse<GetFullMarketQuoteResponse> localVarResponse = GetFullMarketQuoteWithHttpInfo(symbol, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market quotes and instruments - Full market quotes This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetFullMarketQuoteResponse</returns>
        public ApiResponse< GetFullMarketQuoteResponse > GetFullMarketQuoteWithHttpInfo (string symbol, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->GetFullMarketQuote");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->GetFullMarketQuote");

            var localVarPath = "/v2/market-quote/quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullMarketQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFullMarketQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFullMarketQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFullMarketQuoteResponse)));
        }

        /// <summary>
        /// Market quotes and instruments - Full market quotes This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetFullMarketQuoteResponse</returns>
        public async System.Threading.Tasks.Task<GetFullMarketQuoteResponse> GetFullMarketQuoteAsync (string symbol, string apiVersion)
        {
             ApiResponse<GetFullMarketQuoteResponse> localVarResponse = await GetFullMarketQuoteAsyncWithHttpInfo(symbol, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market quotes and instruments - Full market quotes This API provides the functionality to retrieve the full market quotes for one or more instruments.This API returns the complete market data snapshot of up to 500 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetFullMarketQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFullMarketQuoteResponse>> GetFullMarketQuoteAsyncWithHttpInfo (string symbol, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->GetFullMarketQuote");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->GetFullMarketQuote");

            var localVarPath = "/v2/market-quote/quotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullMarketQuote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFullMarketQuoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFullMarketQuoteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFullMarketQuoteResponse)));
        }

        /// <summary>
        /// Market quotes and instruments - OHLC quotes This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetMarketQuoteOHLCResponse</returns>
        public GetMarketQuoteOHLCResponse GetMarketQuoteOHLC (string symbol, string interval, string apiVersion)
        {
             ApiResponse<GetMarketQuoteOHLCResponse> localVarResponse = GetMarketQuoteOHLCWithHttpInfo(symbol, interval, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market quotes and instruments - OHLC quotes This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetMarketQuoteOHLCResponse</returns>
        public ApiResponse< GetMarketQuoteOHLCResponse > GetMarketQuoteOHLCWithHttpInfo (string symbol, string interval, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->GetMarketQuoteOHLC");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling MarketQuoteApi->GetMarketQuoteOHLC");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->GetMarketQuoteOHLC");

            var localVarPath = "/v2/market-quote/ohlc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketQuoteOHLC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketQuoteOHLCResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketQuoteOHLCResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketQuoteOHLCResponse)));
        }

        /// <summary>
        /// Market quotes and instruments - OHLC quotes This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetMarketQuoteOHLCResponse</returns>
        public async System.Threading.Tasks.Task<GetMarketQuoteOHLCResponse> GetMarketQuoteOHLCAsync (string symbol, string interval, string apiVersion)
        {
             ApiResponse<GetMarketQuoteOHLCResponse> localVarResponse = await GetMarketQuoteOHLCAsyncWithHttpInfo(symbol, interval, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market quotes and instruments - OHLC quotes This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="interval">Interval to get ohlc data</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetMarketQuoteOHLCResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMarketQuoteOHLCResponse>> GetMarketQuoteOHLCAsyncWithHttpInfo (string symbol, string interval, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->GetMarketQuoteOHLC");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling MarketQuoteApi->GetMarketQuoteOHLC");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->GetMarketQuoteOHLC");

            var localVarPath = "/v2/market-quote/ohlc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketQuoteOHLC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketQuoteOHLCResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketQuoteOHLCResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketQuoteOHLCResponse)));
        }

        /// <summary>
        /// Market quotes and instruments - LTP quotes. This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetMarketQuoteLastTradedPriceResponse</returns>
        public GetMarketQuoteLastTradedPriceResponse Ltp (string symbol, string apiVersion)
        {
             ApiResponse<GetMarketQuoteLastTradedPriceResponse> localVarResponse = LtpWithHttpInfo(symbol, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market quotes and instruments - LTP quotes. This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetMarketQuoteLastTradedPriceResponse</returns>
        public ApiResponse< GetMarketQuoteLastTradedPriceResponse > LtpWithHttpInfo (string symbol, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->Ltp");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->Ltp");

            var localVarPath = "/v2/market-quote/ltp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ltp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketQuoteLastTradedPriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketQuoteLastTradedPriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketQuoteLastTradedPriceResponse)));
        }

        /// <summary>
        /// Market quotes and instruments - LTP quotes. This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetMarketQuoteLastTradedPriceResponse</returns>
        public async System.Threading.Tasks.Task<GetMarketQuoteLastTradedPriceResponse> LtpAsync (string symbol, string apiVersion)
        {
             ApiResponse<GetMarketQuoteLastTradedPriceResponse> localVarResponse = await LtpAsyncWithHttpInfo(symbol, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market quotes and instruments - LTP quotes. This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 1000 instruments in one go.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Comma separated list of symbols</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetMarketQuoteLastTradedPriceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMarketQuoteLastTradedPriceResponse>> LtpAsyncWithHttpInfo (string symbol, string apiVersion)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling MarketQuoteApi->Ltp");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling MarketQuoteApi->Ltp");

            var localVarPath = "/v2/market-quote/ltp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ltp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketQuoteLastTradedPriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketQuoteLastTradedPriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketQuoteLastTradedPriceResponse)));
        }

    }
}
