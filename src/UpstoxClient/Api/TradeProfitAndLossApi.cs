/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITradeProfitAndLossApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get profit and loss on trades
        /// </summary>
        /// <remarks>
        /// This API gives the charges incurred by users for their trades
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetProfitAndLossChargesResponse</returns>
        GetProfitAndLossChargesResponse GetProfitAndLossCharges (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get profit and loss on trades
        /// </summary>
        /// <remarks>
        /// This API gives the charges incurred by users for their trades
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetProfitAndLossChargesResponse</returns>
        ApiResponse<GetProfitAndLossChargesResponse> GetProfitAndLossChargesWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);
        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetTradeWiseProfitAndLossDataResponse</returns>
        GetTradeWiseProfitAndLossDataResponse GetTradeWiseProfitAndLossData (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetTradeWiseProfitAndLossDataResponse</returns>
        ApiResponse<GetTradeWiseProfitAndLossDataResponse> GetTradeWiseProfitAndLossDataWithHttpInfo (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null);
        /// <summary>
        /// Get profit and loss meta data on trades
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetTradeWiseProfitAndLossMetaDataResponse</returns>
        GetTradeWiseProfitAndLossMetaDataResponse GetTradeWiseProfitAndLossMetaData (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get profit and loss meta data on trades
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetTradeWiseProfitAndLossMetaDataResponse</returns>
        ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse> GetTradeWiseProfitAndLossMetaDataWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get profit and loss on trades
        /// </summary>
        /// <remarks>
        /// This API gives the charges incurred by users for their trades
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetProfitAndLossChargesResponse</returns>
        System.Threading.Tasks.Task<GetProfitAndLossChargesResponse> GetProfitAndLossChargesAsync (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get profit and loss on trades
        /// </summary>
        /// <remarks>
        /// This API gives the charges incurred by users for their trades
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetProfitAndLossChargesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfitAndLossChargesResponse>> GetProfitAndLossChargesAsyncWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);
        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetTradeWiseProfitAndLossDataResponse</returns>
        System.Threading.Tasks.Task<GetTradeWiseProfitAndLossDataResponse> GetTradeWiseProfitAndLossDataAsync (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetTradeWiseProfitAndLossDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTradeWiseProfitAndLossDataResponse>> GetTradeWiseProfitAndLossDataAsyncWithHttpInfo (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null);
        /// <summary>
        /// Get profit and loss meta data on trades
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetTradeWiseProfitAndLossMetaDataResponse</returns>
        System.Threading.Tasks.Task<GetTradeWiseProfitAndLossMetaDataResponse> GetTradeWiseProfitAndLossMetaDataAsync (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);

        /// <summary>
        /// Get profit and loss meta data on trades
        /// </summary>
        /// <remarks>
        /// This API gives the data of the realised Profit and Loss report requested by a user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetTradeWiseProfitAndLossMetaDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse>> GetTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TradeProfitAndLossApi : ITradeProfitAndLossApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeProfitAndLossApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeProfitAndLossApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeProfitAndLossApi"/> class
        /// </summary>
        /// <returns></returns>
        public TradeProfitAndLossApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradeProfitAndLossApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradeProfitAndLossApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get profit and loss on trades This API gives the charges incurred by users for their trades
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetProfitAndLossChargesResponse</returns>
        public GetProfitAndLossChargesResponse GetProfitAndLossCharges (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetProfitAndLossChargesResponse> localVarResponse = GetProfitAndLossChargesWithHttpInfo(segment, financialYear, apiVersion, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get profit and loss on trades This API gives the charges incurred by users for their trades
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetProfitAndLossChargesResponse</returns>
        public ApiResponse< GetProfitAndLossChargesResponse > GetProfitAndLossChargesWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");

            var localVarPath = "/v2/trade/profit-loss/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfitAndLossCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfitAndLossChargesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetProfitAndLossChargesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfitAndLossChargesResponse)));
        }

        /// <summary>
        /// Get profit and loss on trades This API gives the charges incurred by users for their trades
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetProfitAndLossChargesResponse</returns>
        public async System.Threading.Tasks.Task<GetProfitAndLossChargesResponse> GetProfitAndLossChargesAsync (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetProfitAndLossChargesResponse> localVarResponse = await GetProfitAndLossChargesAsyncWithHttpInfo(segment, financialYear, apiVersion, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get profit and loss on trades This API gives the charges incurred by users for their trades
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetProfitAndLossChargesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetProfitAndLossChargesResponse>> GetProfitAndLossChargesAsyncWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetProfitAndLossCharges");

            var localVarPath = "/v2/trade/profit-loss/charges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfitAndLossCharges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfitAndLossChargesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetProfitAndLossChargesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfitAndLossChargesResponse)));
        }

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetTradeWiseProfitAndLossDataResponse</returns>
        public GetTradeWiseProfitAndLossDataResponse GetTradeWiseProfitAndLossData (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetTradeWiseProfitAndLossDataResponse> localVarResponse = GetTradeWiseProfitAndLossDataWithHttpInfo(segment, financialYear, pageNumber, pageSize, apiVersion, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetTradeWiseProfitAndLossDataResponse</returns>
        public ApiResponse< GetTradeWiseProfitAndLossDataResponse > GetTradeWiseProfitAndLossDataWithHttpInfo (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");

            var localVarPath = "/v2/trade/profit-loss/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_number", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeWiseProfitAndLossData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeWiseProfitAndLossDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeWiseProfitAndLossDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeWiseProfitAndLossDataResponse)));
        }

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetTradeWiseProfitAndLossDataResponse</returns>
        public async System.Threading.Tasks.Task<GetTradeWiseProfitAndLossDataResponse> GetTradeWiseProfitAndLossDataAsync (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetTradeWiseProfitAndLossDataResponse> localVarResponse = await GetTradeWiseProfitAndLossDataAsyncWithHttpInfo(segment, financialYear, pageNumber, pageSize, apiVersion, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Trade-wise Profit and Loss Report Data This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="pageNumber">Page Number, the pages are starting from 1</param>
        /// <param name="pageSize">Page size for pagination. The maximum page size value is obtained from P and L report metadata API.</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetTradeWiseProfitAndLossDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTradeWiseProfitAndLossDataResponse>> GetTradeWiseProfitAndLossDataAsyncWithHttpInfo (string segment, string financialYear, int? pageNumber, int? pageSize, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossData");

            var localVarPath = "/v2/trade/profit-loss/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_number", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeWiseProfitAndLossData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeWiseProfitAndLossDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeWiseProfitAndLossDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeWiseProfitAndLossDataResponse)));
        }

        /// <summary>
        /// Get profit and loss meta data on trades This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>GetTradeWiseProfitAndLossMetaDataResponse</returns>
        public GetTradeWiseProfitAndLossMetaDataResponse GetTradeWiseProfitAndLossMetaData (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse> localVarResponse = GetTradeWiseProfitAndLossMetaDataWithHttpInfo(segment, financialYear, apiVersion, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get profit and loss meta data on trades This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>ApiResponse of GetTradeWiseProfitAndLossMetaDataResponse</returns>
        public ApiResponse< GetTradeWiseProfitAndLossMetaDataResponse > GetTradeWiseProfitAndLossMetaDataWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");

            var localVarPath = "/v2/trade/profit-loss/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeWiseProfitAndLossMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeWiseProfitAndLossMetaDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeWiseProfitAndLossMetaDataResponse)));
        }

        /// <summary>
        /// Get profit and loss meta data on trades This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of GetTradeWiseProfitAndLossMetaDataResponse</returns>
        public async System.Threading.Tasks.Task<GetTradeWiseProfitAndLossMetaDataResponse> GetTradeWiseProfitAndLossMetaDataAsync (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
             ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse> localVarResponse = await GetTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo(segment, financialYear, apiVersion, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get profit and loss meta data on trades This API gives the data of the realised Profit and Loss report requested by a user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segment">Segment for which data is requested can be from the following options EQ - Equity,   FO - Futures and Options,   COM  - Commodity,   CD - Currency Derivatives</param>
        /// <param name="financialYear">Financial year for which data has been requested. Concatenation of last 2 digits of from year and to year Sample:for 2021-2022, financial_year will be 2122</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="fromDate">Date from which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <param name="toDate">Date till which data needs to be fetched. from_date and to_date should fall under the same financial year as mentioned in financial_year attribute. Date in dd-mm-yyyy format (optional)</param>
        /// <returns>Task of ApiResponse (GetTradeWiseProfitAndLossMetaDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse>> GetTradeWiseProfitAndLossMetaDataAsyncWithHttpInfo (string segment, string financialYear, string apiVersion, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'segment' is set
            if (segment == null)
                throw new ApiException(400, "Missing required parameter 'segment' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");
            // verify the required parameter 'financialYear' is set
            if (financialYear == null)
                throw new ApiException(400, "Missing required parameter 'financialYear' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling TradeProfitAndLossApi->GetTradeWiseProfitAndLossMetaData");

            var localVarPath = "/v2/trade/profit-loss/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_date", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to_date", toDate)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            if (financialYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "financial_year", financialYear)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeWiseProfitAndLossMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeWiseProfitAndLossMetaDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeWiseProfitAndLossMetaDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeWiseProfitAndLossMetaDataResponse)));
        }

    }
}
