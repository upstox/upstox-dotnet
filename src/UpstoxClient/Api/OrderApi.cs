/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel multi order
        /// </summary>
        /// <remarks>
        /// API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>CancelOrExitMultiOrderResponse</returns>
        CancelOrExitMultiOrderResponse CancelMultiOrder (string tag = null, string segment = null);

        /// <summary>
        /// Cancel multi order
        /// </summary>
        /// <remarks>
        /// API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>ApiResponse of CancelOrExitMultiOrderResponse</returns>
        ApiResponse<CancelOrExitMultiOrderResponse> CancelMultiOrderWithHttpInfo (string tag = null, string segment = null);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>CancelOrderResponse</returns>
        CancelOrderResponse CancelOrder (string orderId, string apiVersion);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of CancelOrderResponse</returns>
        ApiResponse<CancelOrderResponse> CancelOrderWithHttpInfo (string orderId, string apiVersion);
        /// <summary>
        /// Exit all positions
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to exit all the positions 
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>CancelOrExitMultiOrderResponse</returns>
        CancelOrExitMultiOrderResponse ExitPositions (string tag = null, string segment = null);

        /// <summary>
        /// Exit all positions
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to exit all the positions 
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>ApiResponse of CancelOrExitMultiOrderResponse</returns>
        ApiResponse<CancelOrExitMultiOrderResponse> ExitPositionsWithHttpInfo (string tag = null, string segment = null);
        /// <summary>
        /// Get order book
        /// </summary>
        /// <remarks>
        /// This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetOrderBookResponse</returns>
        GetOrderBookResponse GetOrderBook (string apiVersion);

        /// <summary>
        /// Get order book
        /// </summary>
        /// <remarks>
        /// This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetOrderBookResponse</returns>
        ApiResponse<GetOrderBookResponse> GetOrderBookWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get order history
        /// </summary>
        /// <remarks>
        /// This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>GetOrderResponse</returns>
        GetOrderResponse GetOrderDetails (string apiVersion, string orderId = null, string tag = null);

        /// <summary>
        /// Get order history
        /// </summary>
        /// <remarks>
        /// This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>ApiResponse of GetOrderResponse</returns>
        ApiResponse<GetOrderResponse> GetOrderDetailsWithHttpInfo (string apiVersion, string orderId = null, string tag = null);
        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>GetOrderDetailsResponse</returns>
        GetOrderDetailsResponse GetOrderStatus (string orderId = null);

        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>ApiResponse of GetOrderDetailsResponse</returns>
        ApiResponse<GetOrderDetailsResponse> GetOrderStatusWithHttpInfo (string orderId = null);
        /// <summary>
        /// Get trades
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for the day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetTradeResponse</returns>
        GetTradeResponse GetTradeHistory (string apiVersion);

        /// <summary>
        /// Get trades
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for the day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetTradeResponse</returns>
        ApiResponse<GetTradeResponse> GetTradeHistoryWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get trades for order
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for an order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetTradeResponse</returns>
        GetTradeResponse GetTradesByOrder (string orderId, string apiVersion);

        /// <summary>
        /// Get trades for order
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for an order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetTradeResponse</returns>
        ApiResponse<GetTradeResponse> GetTradesByOrderWithHttpInfo (string orderId, string apiVersion);
        /// <summary>
        /// Modify order
        /// </summary>
        /// <remarks>
        /// This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ModifyOrderResponse</returns>
        ModifyOrderResponse ModifyOrder (ModifyOrderRequest body, string apiVersion);

        /// <summary>
        /// Modify order
        /// </summary>
        /// <remarks>
        /// This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of ModifyOrderResponse</returns>
        ApiResponse<ModifyOrderResponse> ModifyOrderWithHttpInfo (ModifyOrderRequest body, string apiVersion);
        /// <summary>
        /// Place multi order
        /// </summary>
        /// <remarks>
        /// This API allows you to place multiple orders to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MultiOrderResponse</returns>
        MultiOrderResponse PlaceMultiOrder (List<MultiOrderRequest> body);

        /// <summary>
        /// Place multi order
        /// </summary>
        /// <remarks>
        /// This API allows you to place multiple orders to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MultiOrderResponse</returns>
        ApiResponse<MultiOrderResponse> PlaceMultiOrderWithHttpInfo (List<MultiOrderRequest> body);
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// This API allows you to place an order to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>PlaceOrderResponse</returns>
        PlaceOrderResponse PlaceOrder (PlaceOrderRequest body, string apiVersion);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// This API allows you to place an order to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of PlaceOrderResponse</returns>
        ApiResponse<PlaceOrderResponse> PlaceOrderWithHttpInfo (PlaceOrderRequest body, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel multi order
        /// </summary>
        /// <remarks>
        /// API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>Task of CancelOrExitMultiOrderResponse</returns>
        System.Threading.Tasks.Task<CancelOrExitMultiOrderResponse> CancelMultiOrderAsync (string tag = null, string segment = null);

        /// <summary>
        /// Cancel multi order
        /// </summary>
        /// <remarks>
        /// API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>Task of ApiResponse (CancelOrExitMultiOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrExitMultiOrderResponse>> CancelMultiOrderAsyncWithHttpInfo (string tag = null, string segment = null);
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of CancelOrderResponse</returns>
        System.Threading.Tasks.Task<CancelOrderResponse> CancelOrderAsync (string orderId, string apiVersion);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (CancelOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrderResponse>> CancelOrderAsyncWithHttpInfo (string orderId, string apiVersion);
        /// <summary>
        /// Exit all positions
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to exit all the positions 
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>Task of CancelOrExitMultiOrderResponse</returns>
        System.Threading.Tasks.Task<CancelOrExitMultiOrderResponse> ExitPositionsAsync (string tag = null, string segment = null);

        /// <summary>
        /// Exit all positions
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to exit all the positions 
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>Task of ApiResponse (CancelOrExitMultiOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrExitMultiOrderResponse>> ExitPositionsAsyncWithHttpInfo (string tag = null, string segment = null);
        /// <summary>
        /// Get order book
        /// </summary>
        /// <remarks>
        /// This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetOrderBookResponse</returns>
        System.Threading.Tasks.Task<GetOrderBookResponse> GetOrderBookAsync (string apiVersion);

        /// <summary>
        /// Get order book
        /// </summary>
        /// <remarks>
        /// This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetOrderBookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrderBookResponse>> GetOrderBookAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get order history
        /// </summary>
        /// <remarks>
        /// This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>Task of GetOrderResponse</returns>
        System.Threading.Tasks.Task<GetOrderResponse> GetOrderDetailsAsync (string apiVersion, string orderId = null, string tag = null);

        /// <summary>
        /// Get order history
        /// </summary>
        /// <remarks>
        /// This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>Task of ApiResponse (GetOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrderResponse>> GetOrderDetailsAsyncWithHttpInfo (string apiVersion, string orderId = null, string tag = null);
        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>Task of GetOrderDetailsResponse</returns>
        System.Threading.Tasks.Task<GetOrderDetailsResponse> GetOrderStatusAsync (string orderId = null);

        /// <summary>
        /// Get order details
        /// </summary>
        /// <remarks>
        /// This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>Task of ApiResponse (GetOrderDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrderDetailsResponse>> GetOrderStatusAsyncWithHttpInfo (string orderId = null);
        /// <summary>
        /// Get trades
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for the day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetTradeResponse</returns>
        System.Threading.Tasks.Task<GetTradeResponse> GetTradeHistoryAsync (string apiVersion);

        /// <summary>
        /// Get trades
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for the day
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTradeResponse>> GetTradeHistoryAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get trades for order
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for an order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetTradeResponse</returns>
        System.Threading.Tasks.Task<GetTradeResponse> GetTradesByOrderAsync (string orderId, string apiVersion);

        /// <summary>
        /// Get trades for order
        /// </summary>
        /// <remarks>
        /// Retrieve the trades executed for an order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTradeResponse>> GetTradesByOrderAsyncWithHttpInfo (string orderId, string apiVersion);
        /// <summary>
        /// Modify order
        /// </summary>
        /// <remarks>
        /// This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ModifyOrderResponse</returns>
        System.Threading.Tasks.Task<ModifyOrderResponse> ModifyOrderAsync (ModifyOrderRequest body, string apiVersion);

        /// <summary>
        /// Modify order
        /// </summary>
        /// <remarks>
        /// This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (ModifyOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyOrderResponse>> ModifyOrderAsyncWithHttpInfo (ModifyOrderRequest body, string apiVersion);
        /// <summary>
        /// Place multi order
        /// </summary>
        /// <remarks>
        /// This API allows you to place multiple orders to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MultiOrderResponse</returns>
        System.Threading.Tasks.Task<MultiOrderResponse> PlaceMultiOrderAsync (List<MultiOrderRequest> body);

        /// <summary>
        /// Place multi order
        /// </summary>
        /// <remarks>
        /// This API allows you to place multiple orders to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MultiOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiOrderResponse>> PlaceMultiOrderAsyncWithHttpInfo (List<MultiOrderRequest> body);
        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// This API allows you to place an order to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of PlaceOrderResponse</returns>
        System.Threading.Tasks.Task<PlaceOrderResponse> PlaceOrderAsync (PlaceOrderRequest body, string apiVersion);

        /// <summary>
        /// Place order
        /// </summary>
        /// <remarks>
        /// This API allows you to place an order to the exchange via Upstox.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (PlaceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaceOrderResponse>> PlaceOrderAsyncWithHttpInfo (PlaceOrderRequest body, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrderApi : IOrderApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrderApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel multi order API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>CancelOrExitMultiOrderResponse</returns>
        public CancelOrExitMultiOrderResponse CancelMultiOrder (string tag = null, string segment = null)
        {
             ApiResponse<CancelOrExitMultiOrderResponse> localVarResponse = CancelMultiOrderWithHttpInfo(tag, segment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel multi order API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>ApiResponse of CancelOrExitMultiOrderResponse</returns>
        public ApiResponse< CancelOrExitMultiOrderResponse > CancelMultiOrderWithHttpInfo (string tag = null, string segment = null)
        {

            var localVarPath = "/v2/order/multi/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMultiOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrExitMultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrExitMultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrExitMultiOrderResponse)));
        }

        /// <summary>
        /// Cancel multi order API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>Task of CancelOrExitMultiOrderResponse</returns>
        public async System.Threading.Tasks.Task<CancelOrExitMultiOrderResponse> CancelMultiOrderAsync (string tag = null, string segment = null)
        {
             ApiResponse<CancelOrExitMultiOrderResponse> localVarResponse = await CancelMultiOrderAsyncWithHttpInfo(tag, segment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel multi order API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the orders for which the orders must be cancelled (optional)</param>
        /// <param name="segment">The segment for which the orders must be cancelled (optional)</param>
        /// <returns>Task of ApiResponse (CancelOrExitMultiOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelOrExitMultiOrderResponse>> CancelMultiOrderAsyncWithHttpInfo (string tag = null, string segment = null)
        {

            var localVarPath = "/v2/order/multi/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMultiOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrExitMultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrExitMultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrExitMultiOrderResponse)));
        }

        /// <summary>
        /// Cancel order Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>CancelOrderResponse</returns>
        public CancelOrderResponse CancelOrder (string orderId, string apiVersion)
        {
             ApiResponse<CancelOrderResponse> localVarResponse = CancelOrderWithHttpInfo(orderId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of CancelOrderResponse</returns>
        public ApiResponse< CancelOrderResponse > CancelOrderWithHttpInfo (string orderId, string apiVersion)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->CancelOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->CancelOrder");

            var localVarPath = "/order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrderResponse)));
        }

        /// <summary>
        /// Cancel order Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of CancelOrderResponse</returns>
        public async System.Threading.Tasks.Task<CancelOrderResponse> CancelOrderAsync (string orderId, string apiVersion)
        {
             ApiResponse<CancelOrderResponse> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel order Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order must be cancelled</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (CancelOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelOrderResponse>> CancelOrderAsyncWithHttpInfo (string orderId, string apiVersion)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->CancelOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->CancelOrder");

            var localVarPath = "/order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrderResponse)));
        }

        /// <summary>
        /// Exit all positions This API provides the functionality to exit all the positions 
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>CancelOrExitMultiOrderResponse</returns>
        public CancelOrExitMultiOrderResponse ExitPositions (string tag = null, string segment = null)
        {
             ApiResponse<CancelOrExitMultiOrderResponse> localVarResponse = ExitPositionsWithHttpInfo(tag, segment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exit all positions This API provides the functionality to exit all the positions 
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>ApiResponse of CancelOrExitMultiOrderResponse</returns>
        public ApiResponse< CancelOrExitMultiOrderResponse > ExitPositionsWithHttpInfo (string tag = null, string segment = null)
        {

            var localVarPath = "/v2/order/positions/exit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrExitMultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrExitMultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrExitMultiOrderResponse)));
        }

        /// <summary>
        /// Exit all positions This API provides the functionality to exit all the positions 
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>Task of CancelOrExitMultiOrderResponse</returns>
        public async System.Threading.Tasks.Task<CancelOrExitMultiOrderResponse> ExitPositionsAsync (string tag = null, string segment = null)
        {
             ApiResponse<CancelOrExitMultiOrderResponse> localVarResponse = await ExitPositionsAsyncWithHttpInfo(tag, segment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exit all positions This API provides the functionality to exit all the positions 
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag associated with the positions for which the positions must be exit (optional)</param>
        /// <param name="segment">The segment for which the positions must be exit (optional)</param>
        /// <returns>Task of ApiResponse (CancelOrExitMultiOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelOrExitMultiOrderResponse>> ExitPositionsAsyncWithHttpInfo (string tag = null, string segment = null)
        {

            var localVarPath = "/v2/order/positions/exit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (segment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "segment", segment)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelOrExitMultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelOrExitMultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelOrExitMultiOrderResponse)));
        }

        /// <summary>
        /// Get order book This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetOrderBookResponse</returns>
        public GetOrderBookResponse GetOrderBook (string apiVersion)
        {
             ApiResponse<GetOrderBookResponse> localVarResponse = GetOrderBookWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order book This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetOrderBookResponse</returns>
        public ApiResponse< GetOrderBookResponse > GetOrderBookWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetOrderBook");

            var localVarPath = "/order/retrieve-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderBookResponse)));
        }

        /// <summary>
        /// Get order book This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetOrderBookResponse</returns>
        public async System.Threading.Tasks.Task<GetOrderBookResponse> GetOrderBookAsync (string apiVersion)
        {
             ApiResponse<GetOrderBookResponse> localVarResponse = await GetOrderBookAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order book This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetOrderBookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrderBookResponse>> GetOrderBookAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetOrderBook");

            var localVarPath = "/order/retrieve-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderBookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderBookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderBookResponse)));
        }

        /// <summary>
        /// Get order history This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>GetOrderResponse</returns>
        public GetOrderResponse GetOrderDetails (string apiVersion, string orderId = null, string tag = null)
        {
             ApiResponse<GetOrderResponse> localVarResponse = GetOrderDetailsWithHttpInfo(apiVersion, orderId, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order history This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>ApiResponse of GetOrderResponse</returns>
        public ApiResponse< GetOrderResponse > GetOrderDetailsWithHttpInfo (string apiVersion, string orderId = null, string tag = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetOrderDetails");

            var localVarPath = "/order/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderResponse)));
        }

        /// <summary>
        /// Get order history This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>Task of GetOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetOrderResponse> GetOrderDetailsAsync (string apiVersion, string orderId = null, string tag = null)
        {
             ApiResponse<GetOrderResponse> localVarResponse = await GetOrderDetailsAsyncWithHttpInfo(apiVersion, orderId, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order history This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="orderId">The order reference ID for which the order history is required (optional)</param>
        /// <param name="tag">The unique tag of the order for which the order history is being requested (optional)</param>
        /// <returns>Task of ApiResponse (GetOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrderResponse>> GetOrderDetailsAsyncWithHttpInfo (string apiVersion, string orderId = null, string tag = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetOrderDetails");

            var localVarPath = "/order/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderResponse)));
        }

        /// <summary>
        /// Get order details This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>GetOrderDetailsResponse</returns>
        public GetOrderDetailsResponse GetOrderStatus (string orderId = null)
        {
             ApiResponse<GetOrderDetailsResponse> localVarResponse = GetOrderStatusWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order details This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>ApiResponse of GetOrderDetailsResponse</returns>
        public ApiResponse< GetOrderDetailsResponse > GetOrderStatusWithHttpInfo (string orderId = null)
        {

            var localVarPath = "/v2/order/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderDetailsResponse)));
        }

        /// <summary>
        /// Get order details This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>Task of GetOrderDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GetOrderDetailsResponse> GetOrderStatusAsync (string orderId = null)
        {
             ApiResponse<GetOrderDetailsResponse> localVarResponse = await GetOrderStatusAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order details This API provides the recent detail of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session.\\n\\nThe order details can be requested using order_id.  
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order reference ID for which the order details is required (optional)</param>
        /// <returns>Task of ApiResponse (GetOrderDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrderDetailsResponse>> GetOrderStatusAsyncWithHttpInfo (string orderId = null)
        {

            var localVarPath = "/v2/order/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrderDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetOrderDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrderDetailsResponse)));
        }

        /// <summary>
        /// Get trades Retrieve the trades executed for the day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetTradeResponse</returns>
        public GetTradeResponse GetTradeHistory (string apiVersion)
        {
             ApiResponse<GetTradeResponse> localVarResponse = GetTradeHistoryWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trades Retrieve the trades executed for the day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetTradeResponse</returns>
        public ApiResponse< GetTradeResponse > GetTradeHistoryWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetTradeHistory");

            var localVarPath = "/order/trades/get-trades-for-day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeResponse)));
        }

        /// <summary>
        /// Get trades Retrieve the trades executed for the day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetTradeResponse</returns>
        public async System.Threading.Tasks.Task<GetTradeResponse> GetTradeHistoryAsync (string apiVersion)
        {
             ApiResponse<GetTradeResponse> localVarResponse = await GetTradeHistoryAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trades Retrieve the trades executed for the day
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetTradeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTradeResponse>> GetTradeHistoryAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetTradeHistory");

            var localVarPath = "/order/trades/get-trades-for-day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradeHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeResponse)));
        }

        /// <summary>
        /// Get trades for order Retrieve the trades executed for an order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>GetTradeResponse</returns>
        public GetTradeResponse GetTradesByOrder (string orderId, string apiVersion)
        {
             ApiResponse<GetTradeResponse> localVarResponse = GetTradesByOrderWithHttpInfo(orderId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trades for order Retrieve the trades executed for an order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of GetTradeResponse</returns>
        public ApiResponse< GetTradeResponse > GetTradesByOrderWithHttpInfo (string orderId, string apiVersion)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetTradesByOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetTradesByOrder");

            var localVarPath = "/order/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradesByOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeResponse)));
        }

        /// <summary>
        /// Get trades for order Retrieve the trades executed for an order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of GetTradeResponse</returns>
        public async System.Threading.Tasks.Task<GetTradeResponse> GetTradesByOrderAsync (string orderId, string apiVersion)
        {
             ApiResponse<GetTradeResponse> localVarResponse = await GetTradesByOrderAsyncWithHttpInfo(orderId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trades for order Retrieve the trades executed for an order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The order ID for which the order to get order trades</param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (GetTradeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTradeResponse>> GetTradesByOrderAsyncWithHttpInfo (string orderId, string apiVersion)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetTradesByOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->GetTradesByOrder");

            var localVarPath = "/order/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTradesByOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTradeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTradeResponse)));
        }

        /// <summary>
        /// Modify order This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ModifyOrderResponse</returns>
        public ModifyOrderResponse ModifyOrder (ModifyOrderRequest body, string apiVersion)
        {
             ApiResponse<ModifyOrderResponse> localVarResponse = ModifyOrderWithHttpInfo(body, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify order This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of ModifyOrderResponse</returns>
        public ApiResponse< ModifyOrderResponse > ModifyOrderWithHttpInfo (ModifyOrderRequest body, string apiVersion)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->ModifyOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->ModifyOrder");

            var localVarPath = "/order/modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModifyOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyOrderResponse)));
        }

        /// <summary>
        /// Modify order This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ModifyOrderResponse</returns>
        public async System.Threading.Tasks.Task<ModifyOrderResponse> ModifyOrderAsync (ModifyOrderRequest body, string apiVersion)
        {
             ApiResponse<ModifyOrderResponse> localVarResponse = await ModifyOrderAsyncWithHttpInfo(body, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify order This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (ModifyOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyOrderResponse>> ModifyOrderAsyncWithHttpInfo (ModifyOrderRequest body, string apiVersion)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->ModifyOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->ModifyOrder");

            var localVarPath = "/order/modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModifyOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyOrderResponse)));
        }
		
		/// <summary>
        /// Place multi order This API allows you to place multiple orders to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MultiOrderResponse</returns>
        public MultiOrderResponse PlaceMultiOrder (List<MultiOrderRequest> body)
        {
             ApiResponse<MultiOrderResponse> localVarResponse = PlaceMultiOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place multi order This API allows you to place multiple orders to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MultiOrderResponse</returns>
        public ApiResponse< MultiOrderResponse > PlaceMultiOrderWithHttpInfo (List<MultiOrderRequest> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->PlaceMultiOrder");

            var localVarPath = "/v2/order/multi/place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiOrderResponse)));
        }

        /// <summary>
        /// Place multi order This API allows you to place multiple orders to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MultiOrderResponse</returns>
        public async System.Threading.Tasks.Task<MultiOrderResponse> PlaceMultiOrderAsync (List<MultiOrderRequest> body)
        {
             ApiResponse<MultiOrderResponse> localVarResponse = await PlaceMultiOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place multi order This API allows you to place multiple orders to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MultiOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiOrderResponse>> PlaceMultiOrderAsyncWithHttpInfo (List<MultiOrderRequest> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->PlaceMultiOrder");

            var localVarPath = "/v2/order/multi/place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiOrderResponse)));
        }
		

        /// <summary>
        /// Place order This API allows you to place an order to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>PlaceOrderResponse</returns>
        public PlaceOrderResponse PlaceOrder (PlaceOrderRequest body, string apiVersion)
        {
             ApiResponse<PlaceOrderResponse> localVarResponse = PlaceOrderWithHttpInfo(body, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place order This API allows you to place an order to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of PlaceOrderResponse</returns>
        public ApiResponse< PlaceOrderResponse > PlaceOrderWithHttpInfo (PlaceOrderRequest body, string apiVersion)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->PlaceOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->PlaceOrder");

            var localVarPath = "/order/place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaceOrderResponse)));
        }

        /// <summary>
        /// Place order This API allows you to place an order to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of PlaceOrderResponse</returns>
        public async System.Threading.Tasks.Task<PlaceOrderResponse> PlaceOrderAsync (PlaceOrderRequest body, string apiVersion)
        {
             ApiResponse<PlaceOrderResponse> localVarResponse = await PlaceOrderAsyncWithHttpInfo(body, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place order This API allows you to place an order to the exchange via Upstox.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (PlaceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlaceOrderResponse>> PlaceOrderAsyncWithHttpInfo (PlaceOrderRequest body, string apiVersion)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderApi->PlaceOrder");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrderApi->PlaceOrder");

            var localVarPath = "/order/place";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlaceOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlaceOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlaceOrderResponse)));
        }

    }
}
