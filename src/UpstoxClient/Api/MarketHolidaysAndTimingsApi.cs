/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMarketHolidaysAndTimingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Exchange Timings on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the exchange timings on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>GetExchangeTimingResponse</returns>
        GetExchangeTimingResponse GetExchangeTimings (string date);

        /// <summary>
        /// Get Exchange Timings on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the exchange timings on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of GetExchangeTimingResponse</returns>
        ApiResponse<GetExchangeTimingResponse> GetExchangeTimingsWithHttpInfo (string date);
        /// <summary>
        /// Get Holiday on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>GetHolidayResponse</returns>
        GetHolidayResponse GetHoliday (string date);

        /// <summary>
        /// Get Holiday on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of GetHolidayResponse</returns>
        ApiResponse<GetHolidayResponse> GetHolidayWithHttpInfo (string date);
        /// <summary>
        /// Get Holiday list of current year
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday list of current year
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetHolidayResponse</returns>
        GetHolidayResponse GetHolidays ();

        /// <summary>
        /// Get Holiday list of current year
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday list of current year
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetHolidayResponse</returns>
        ApiResponse<GetHolidayResponse> GetHolidaysWithHttpInfo ();
        /// <summary>
        /// Get Market status for particular exchange
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the market status for particular exchange
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>GetMarketStatusResponse</returns>
        GetMarketStatusResponse GetMarketStatus (string exchange);

        /// <summary>
        /// Get Market status for particular exchange
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the market status for particular exchange
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of GetMarketStatusResponse</returns>
        ApiResponse<GetMarketStatusResponse> GetMarketStatusWithHttpInfo (string exchange);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Exchange Timings on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the exchange timings on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of GetExchangeTimingResponse</returns>
        System.Threading.Tasks.Task<GetExchangeTimingResponse> GetExchangeTimingsAsync (string date);

        /// <summary>
        /// Get Exchange Timings on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the exchange timings on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (GetExchangeTimingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExchangeTimingResponse>> GetExchangeTimingsAsyncWithHttpInfo (string date);
        /// <summary>
        /// Get Holiday on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of GetHolidayResponse</returns>
        System.Threading.Tasks.Task<GetHolidayResponse> GetHolidayAsync (string date);

        /// <summary>
        /// Get Holiday on particular date
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday on particular date
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (GetHolidayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHolidayResponse>> GetHolidayAsyncWithHttpInfo (string date);
        /// <summary>
        /// Get Holiday list of current year
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday list of current year
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetHolidayResponse</returns>
        System.Threading.Tasks.Task<GetHolidayResponse> GetHolidaysAsync ();

        /// <summary>
        /// Get Holiday list of current year
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the holiday list of current year
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetHolidayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHolidayResponse>> GetHolidaysAsyncWithHttpInfo ();
        /// <summary>
        /// Get Market status for particular exchange
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the market status for particular exchange
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>Task of GetMarketStatusResponse</returns>
        System.Threading.Tasks.Task<GetMarketStatusResponse> GetMarketStatusAsync (string exchange);

        /// <summary>
        /// Get Market status for particular exchange
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the market status for particular exchange
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (GetMarketStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarketStatusResponse>> GetMarketStatusAsyncWithHttpInfo (string exchange);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MarketHolidaysAndTimingsApi : IMarketHolidaysAndTimingsApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketHolidaysAndTimingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketHolidaysAndTimingsApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketHolidaysAndTimingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MarketHolidaysAndTimingsApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketHolidaysAndTimingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketHolidaysAndTimingsApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Exchange Timings on particular date This API provides the functionality to retrieve the exchange timings on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>GetExchangeTimingResponse</returns>
        public GetExchangeTimingResponse GetExchangeTimings (string date)
        {
             ApiResponse<GetExchangeTimingResponse> localVarResponse = GetExchangeTimingsWithHttpInfo(date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Exchange Timings on particular date This API provides the functionality to retrieve the exchange timings on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of GetExchangeTimingResponse</returns>
        public ApiResponse< GetExchangeTimingResponse > GetExchangeTimingsWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling MarketHolidaysAndTimingsApi->GetExchangeTimings");

            var localVarPath = "/v2/market/timings/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeTimings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExchangeTimingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExchangeTimingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExchangeTimingResponse)));
        }

        /// <summary>
        /// Get Exchange Timings on particular date This API provides the functionality to retrieve the exchange timings on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of GetExchangeTimingResponse</returns>
        public async System.Threading.Tasks.Task<GetExchangeTimingResponse> GetExchangeTimingsAsync (string date)
        {
             ApiResponse<GetExchangeTimingResponse> localVarResponse = await GetExchangeTimingsAsyncWithHttpInfo(date);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Exchange Timings on particular date This API provides the functionality to retrieve the exchange timings on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (GetExchangeTimingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExchangeTimingResponse>> GetExchangeTimingsAsyncWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling MarketHolidaysAndTimingsApi->GetExchangeTimings");

            var localVarPath = "/v2/market/timings/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeTimings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExchangeTimingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetExchangeTimingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExchangeTimingResponse)));
        }

        /// <summary>
        /// Get Holiday on particular date This API provides the functionality to retrieve the holiday on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>GetHolidayResponse</returns>
        public GetHolidayResponse GetHoliday (string date)
        {
             ApiResponse<GetHolidayResponse> localVarResponse = GetHolidayWithHttpInfo(date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holiday on particular date This API provides the functionality to retrieve the holiday on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>ApiResponse of GetHolidayResponse</returns>
        public ApiResponse< GetHolidayResponse > GetHolidayWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling MarketHolidaysAndTimingsApi->GetHoliday");

            var localVarPath = "/v2/market/holidays/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoliday", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHolidayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHolidayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHolidayResponse)));
        }

        /// <summary>
        /// Get Holiday on particular date This API provides the functionality to retrieve the holiday on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of GetHolidayResponse</returns>
        public async System.Threading.Tasks.Task<GetHolidayResponse> GetHolidayAsync (string date)
        {
             ApiResponse<GetHolidayResponse> localVarResponse = await GetHolidayAsyncWithHttpInfo(date);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holiday on particular date This API provides the functionality to retrieve the holiday on particular date
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date"></param>
        /// <returns>Task of ApiResponse (GetHolidayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetHolidayResponse>> GetHolidayAsyncWithHttpInfo (string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling MarketHolidaysAndTimingsApi->GetHoliday");

            var localVarPath = "/v2/market/holidays/{date}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarPathParams.Add("date", this.Configuration.ApiClient.ParameterToString(date)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHoliday", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHolidayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHolidayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHolidayResponse)));
        }

        /// <summary>
        /// Get Holiday list of current year This API provides the functionality to retrieve the holiday list of current year
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetHolidayResponse</returns>
        public GetHolidayResponse GetHolidays ()
        {
             ApiResponse<GetHolidayResponse> localVarResponse = GetHolidaysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holiday list of current year This API provides the functionality to retrieve the holiday list of current year
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetHolidayResponse</returns>
        public ApiResponse< GetHolidayResponse > GetHolidaysWithHttpInfo ()
        {

            var localVarPath = "/v2/market/holidays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHolidays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHolidayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHolidayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHolidayResponse)));
        }

        /// <summary>
        /// Get Holiday list of current year This API provides the functionality to retrieve the holiday list of current year
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetHolidayResponse</returns>
        public async System.Threading.Tasks.Task<GetHolidayResponse> GetHolidaysAsync ()
        {
             ApiResponse<GetHolidayResponse> localVarResponse = await GetHolidaysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Holiday list of current year This API provides the functionality to retrieve the holiday list of current year
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetHolidayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetHolidayResponse>> GetHolidaysAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/market/holidays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHolidays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHolidayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetHolidayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHolidayResponse)));
        }

        /// <summary>
        /// Get Market status for particular exchange This API provides the functionality to retrieve the market status for particular exchange
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>GetMarketStatusResponse</returns>
        public GetMarketStatusResponse GetMarketStatus (string exchange)
        {
             ApiResponse<GetMarketStatusResponse> localVarResponse = GetMarketStatusWithHttpInfo(exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market status for particular exchange This API provides the functionality to retrieve the market status for particular exchange
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of GetMarketStatusResponse</returns>
        public ApiResponse< GetMarketStatusResponse > GetMarketStatusWithHttpInfo (string exchange)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling MarketHolidaysAndTimingsApi->GetMarketStatus");

            var localVarPath = "/v2/market/status/{exchange}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketStatusResponse)));
        }

        /// <summary>
        /// Get Market status for particular exchange This API provides the functionality to retrieve the market status for particular exchange
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>Task of GetMarketStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetMarketStatusResponse> GetMarketStatusAsync (string exchange)
        {
             ApiResponse<GetMarketStatusResponse> localVarResponse = await GetMarketStatusAsyncWithHttpInfo(exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Market status for particular exchange This API provides the functionality to retrieve the market status for particular exchange
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (GetMarketStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMarketStatusResponse>> GetMarketStatusAsyncWithHttpInfo (string exchange)
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new ApiException(400, "Missing required parameter 'exchange' when calling MarketHolidaysAndTimingsApi->GetMarketStatus");

            var localVarPath = "/v2/market/status/{exchange}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchange != null) localVarPathParams.Add("exchange", this.Configuration.ApiClient.ParameterToString(exchange)); // path parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMarketStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetMarketStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMarketStatusResponse)));
        }

    }
}
