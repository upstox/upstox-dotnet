/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILoginApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authorize API
        /// </summary>
        /// <remarks>
        /// This provides details on the login endpoint.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        void Authorize (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null);

        /// <summary>
        /// Authorize API
        /// </summary>
        /// <remarks>
        /// This provides details on the login endpoint.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthorizeWithHttpInfo (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null);
        /// <summary>
        /// Init token API
        /// </summary>
        /// <remarks>
        /// This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>IndieUserInitTokenResponse</returns>
        IndieUserInitTokenResponse InitTokenRequestForIndieUser (IndieUserTokenRequest body, string clientId);

        /// <summary>
        /// Init token API
        /// </summary>
        /// <remarks>
        /// This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of IndieUserInitTokenResponse</returns>
        ApiResponse<IndieUserInitTokenResponse> InitTokenRequestForIndieUserWithHttpInfo (IndieUserTokenRequest body, string clientId);
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// Logout
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>LogoutResponse</returns>
        LogoutResponse Logout (string apiVersion);

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// Logout
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of LogoutResponse</returns>
        ApiResponse<LogoutResponse> LogoutWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get token API
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse Token (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null);

        /// <summary>
        /// Get token API
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> TokenWithHttpInfo (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Authorize API
        /// </summary>
        /// <remarks>
        /// This provides details on the login endpoint.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthorizeAsync (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null);

        /// <summary>
        /// Authorize API
        /// </summary>
        /// <remarks>
        /// This provides details on the login endpoint.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null);
        /// <summary>
        /// Init token API
        /// </summary>
        /// <remarks>
        /// This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of IndieUserInitTokenResponse</returns>
        System.Threading.Tasks.Task<IndieUserInitTokenResponse> InitTokenRequestForIndieUserAsync (IndieUserTokenRequest body, string clientId);

        /// <summary>
        /// Init token API
        /// </summary>
        /// <remarks>
        /// This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse (IndieUserInitTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndieUserInitTokenResponse>> InitTokenRequestForIndieUserAsyncWithHttpInfo (IndieUserTokenRequest body, string clientId);
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// Logout
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of LogoutResponse</returns>
        System.Threading.Tasks.Task<LogoutResponse> LogoutAsync (string apiVersion);

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// Logout
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (LogoutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutResponse>> LogoutAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Get token API
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> TokenAsync (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null);

        /// <summary>
        /// Get token API
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> TokenAsyncWithHttpInfo (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LoginApi : ILoginApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// </summary>
        /// <returns></returns>
        public LoginApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authorize API This provides details on the login endpoint.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        public void Authorize (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null)
        {
             AuthorizeWithHttpInfo(clientId, redirectUri, apiVersion, state, scope);
        }

        /// <summary>
        /// Authorize API This provides details on the login endpoint.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthorizeWithHttpInfo (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling LoginApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling LoginApi->Authorize");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Authorize");

            var localVarPath = "/v2/login/authorization/dialog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Authorize API This provides details on the login endpoint.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthorizeAsync (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null)
        {
             await AuthorizeAsyncWithHttpInfo(clientId, redirectUri, apiVersion, state, scope);

        }

        /// <summary>
        /// Authorize API This provides details on the login endpoint.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri"></param>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="state"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string clientId, string redirectUri, string apiVersion, string state = null, string scope = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling LoginApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling LoginApi->Authorize");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Authorize");

            var localVarPath = "/v2/login/authorization/dialog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Init token API This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>IndieUserInitTokenResponse</returns>
        public IndieUserInitTokenResponse InitTokenRequestForIndieUser (IndieUserTokenRequest body, string clientId)
        {
             ApiResponse<IndieUserInitTokenResponse> localVarResponse = InitTokenRequestForIndieUserWithHttpInfo(body, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Init token API This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of IndieUserInitTokenResponse</returns>
        public ApiResponse< IndieUserInitTokenResponse > InitTokenRequestForIndieUserWithHttpInfo (IndieUserTokenRequest body, string clientId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->InitTokenRequestForIndieUser");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling LoginApi->InitTokenRequestForIndieUser");

            var localVarPath = "/v3/login/auth/token/request/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitTokenRequestForIndieUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndieUserInitTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IndieUserInitTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndieUserInitTokenResponse)));
        }

        /// <summary>
        /// Init token API This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of IndieUserInitTokenResponse</returns>
        public async System.Threading.Tasks.Task<IndieUserInitTokenResponse> InitTokenRequestForIndieUserAsync (IndieUserTokenRequest body, string clientId)
        {
             ApiResponse<IndieUserInitTokenResponse> localVarResponse = await InitTokenRequestForIndieUserAsyncWithHttpInfo(body, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Init token API This API provides the initialize the generate token and it&#x27;s expiry for an indie user
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse (IndieUserInitTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IndieUserInitTokenResponse>> InitTokenRequestForIndieUserAsyncWithHttpInfo (IndieUserTokenRequest body, string clientId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginApi->InitTokenRequestForIndieUser");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling LoginApi->InitTokenRequestForIndieUser");

            var localVarPath = "/v3/login/auth/token/request/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitTokenRequestForIndieUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IndieUserInitTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IndieUserInitTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IndieUserInitTokenResponse)));
        }

        /// <summary>
        /// Logout Logout
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>LogoutResponse</returns>
        public LogoutResponse Logout (string apiVersion)
        {
             ApiResponse<LogoutResponse> localVarResponse = LogoutWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout Logout
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of LogoutResponse</returns>
        public ApiResponse< LogoutResponse > LogoutWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Logout");

            var localVarPath = "/v2/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResponse)));
        }

        /// <summary>
        /// Logout Logout
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of LogoutResponse</returns>
        public async System.Threading.Tasks.Task<LogoutResponse> LogoutAsync (string apiVersion)
        {
             ApiResponse<LogoutResponse> localVarResponse = await LogoutAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout Logout
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (LogoutResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogoutResponse>> LogoutAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Logout");

            var localVarPath = "/v2/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResponse)));
        }

        /// <summary>
        /// Get token API This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse Token (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null)
        {
             ApiResponse<TokenResponse> localVarResponse = TokenWithHttpInfo(apiVersion, code, clientId, clientSecret, redirectUri, grantType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get token API This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > TokenWithHttpInfo (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Token");

            var localVarPath = "/v2/login/authorization/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Get token API This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> TokenAsync (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await TokenAsyncWithHttpInfo(apiVersion, code, clientId, clientSecret, redirectUri, grantType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get token API This API provides the functionality to obtain opaque token from authorization_code exchange and also provides the user’s profile in the same response.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <param name="code"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> TokenAsyncWithHttpInfo (string apiVersion, string code = null, string clientId = null, string clientSecret = null, string redirectUri = null, string grantType = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling LoginApi->Token");

            var localVarPath = "/v2/login/authorization/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

    }
}
