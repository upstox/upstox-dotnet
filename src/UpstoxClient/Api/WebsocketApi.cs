/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UpstoxClient.Client;
using UpstoxClient.Model;

namespace UpstoxClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWebsocketApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Market Data Feed
        /// </summary>
        /// <remarks>
        ///  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns></returns>
        void GetMarketDataFeed (string apiVersion);

        /// <summary>
        /// Market Data Feed
        /// </summary>
        /// <remarks>
        ///  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMarketDataFeedWithHttpInfo (string apiVersion);
        /// <summary>
        /// Market Data Feed Authorize
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>WebsocketAuthRedirectResponse</returns>
        WebsocketAuthRedirectResponse GetMarketDataFeedAuthorize (string apiVersion);

        /// <summary>
        /// Market Data Feed Authorize
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of WebsocketAuthRedirectResponse</returns>
        ApiResponse<WebsocketAuthRedirectResponse> GetMarketDataFeedAuthorizeWithHttpInfo (string apiVersion);
        /// <summary>
        /// Portfolio Stream Feed
        /// </summary>
        /// <remarks>
        /// This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns></returns>
        void GetPortfolioStreamFeed (string apiVersion);

        /// <summary>
        /// Portfolio Stream Feed
        /// </summary>
        /// <remarks>
        /// This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPortfolioStreamFeedWithHttpInfo (string apiVersion);
        /// <summary>
        /// Portfolio Stream Feed Authorize
        /// </summary>
        /// <remarks>
        ///  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>WebsocketAuthRedirectResponse</returns>
        WebsocketAuthRedirectResponse GetPortfolioStreamFeedAuthorize (string apiVersion);

        /// <summary>
        /// Portfolio Stream Feed Authorize
        /// </summary>
        /// <remarks>
        ///  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of WebsocketAuthRedirectResponse</returns>
        ApiResponse<WebsocketAuthRedirectResponse> GetPortfolioStreamFeedAuthorizeWithHttpInfo (string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Market Data Feed
        /// </summary>
        /// <remarks>
        ///  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMarketDataFeedAsync (string apiVersion);

        /// <summary>
        /// Market Data Feed
        /// </summary>
        /// <remarks>
        ///  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMarketDataFeedAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Market Data Feed Authorize
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of WebsocketAuthRedirectResponse</returns>
        System.Threading.Tasks.Task<WebsocketAuthRedirectResponse> GetMarketDataFeedAuthorizeAsync (string apiVersion);

        /// <summary>
        /// Market Data Feed Authorize
        /// </summary>
        /// <remarks>
        /// This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (WebsocketAuthRedirectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebsocketAuthRedirectResponse>> GetMarketDataFeedAuthorizeAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Portfolio Stream Feed
        /// </summary>
        /// <remarks>
        /// This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPortfolioStreamFeedAsync (string apiVersion);

        /// <summary>
        /// Portfolio Stream Feed
        /// </summary>
        /// <remarks>
        /// This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPortfolioStreamFeedAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Portfolio Stream Feed Authorize
        /// </summary>
        /// <remarks>
        ///  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of WebsocketAuthRedirectResponse</returns>
        System.Threading.Tasks.Task<WebsocketAuthRedirectResponse> GetPortfolioStreamFeedAuthorizeAsync (string apiVersion);

        /// <summary>
        /// Portfolio Stream Feed Authorize
        /// </summary>
        /// <remarks>
        ///  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </remarks>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (WebsocketAuthRedirectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebsocketAuthRedirectResponse>> GetPortfolioStreamFeedAuthorizeAsyncWithHttpInfo (string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WebsocketApi : IWebsocketApi
    {
        private UpstoxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebsocketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebsocketApi(String basePath)
        {
            this.Configuration = new UpstoxClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebsocketApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebsocketApi()
        {
            this.Configuration = UpstoxClient.Client.Configuration.Default;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebsocketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebsocketApi(UpstoxClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UpstoxClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UpstoxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UpstoxClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UpstoxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Market Data Feed  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns></returns>
        public void GetMarketDataFeed (string apiVersion)
        {
             GetMarketDataFeedWithHttpInfo("2.0");
        }

        public void GetMarketDataFeedV3(){
            GetMarketDataFeedWithHttpInfo("3.0");
        }

        /// <summary>
        /// Market Data Feed  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMarketDataFeedWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetMarketDataFeed");

            var localVarPath = apiVersion == "2.0" ? "/v2/feed/market-data-feed" : "/v3/feed/market-data-feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketDataFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Market Data Feed  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMarketDataFeedAsync (string apiVersion)
        {
             await GetMarketDataFeedAsyncWithHttpInfo(apiVersion);

        }

        /// <summary>
        /// Market Data Feed  This API redirects the client to the respective socket endpoint to receive Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMarketDataFeedAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetMarketDataFeed");

            var localVarPath = apiVersion == "2.0" ? "/v2/feed/market-data-feed" : "/v3/feed/market-data-feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketDataFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Market Data Feed Authorize This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>WebsocketAuthRedirectResponse</returns>
        public WebsocketAuthRedirectResponse GetMarketDataFeedAuthorize (string apiVersion)
        {
             ApiResponse<WebsocketAuthRedirectResponse> localVarResponse = GetMarketDataFeedAuthorizeWithHttpInfo("2.0");
             return localVarResponse.Data;
        }

        public WebsocketAuthRedirectResponse GetMarketDataFeedAuthorizeV3 ()
        {
             ApiResponse<WebsocketAuthRedirectResponse> localVarResponse = GetMarketDataFeedAuthorizeWithHttpInfo("3.0");
             return localVarResponse.Data;
        }

        /// <summary>
        /// Market Data Feed Authorize This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of WebsocketAuthRedirectResponse</returns>
        public ApiResponse< WebsocketAuthRedirectResponse > GetMarketDataFeedAuthorizeWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetMarketDataFeedAuthorize");

            var localVarPath = apiVersion == "2.0" ? "/v2/feed/market-data-feed/authorize" :  "/v3/feed/market-data-feed/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketDataFeedAuthorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebsocketAuthRedirectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebsocketAuthRedirectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebsocketAuthRedirectResponse)));
        }

        /// <summary>
        /// Market Data Feed Authorize This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of WebsocketAuthRedirectResponse</returns>
        public async System.Threading.Tasks.Task<WebsocketAuthRedirectResponse> GetMarketDataFeedAuthorizeAsync (string apiVersion)
        {
             ApiResponse<WebsocketAuthRedirectResponse> localVarResponse = await GetMarketDataFeedAuthorizeAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Market Data Feed Authorize This API provides the functionality to retrieve the socket endpoint URI for Market updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (WebsocketAuthRedirectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebsocketAuthRedirectResponse>> GetMarketDataFeedAuthorizeAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetMarketDataFeedAuthorize");

            var localVarPath = apiVersion == "2.0" ? "/v2/feed/market-data-feed/authorize" :  "/v3/feed/market-data-feed/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketDataFeedAuthorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebsocketAuthRedirectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebsocketAuthRedirectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebsocketAuthRedirectResponse)));
        }

        /// <summary>
        /// Portfolio Stream Feed This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns></returns>
        public void GetPortfolioStreamFeed (string apiVersion)
        {
             GetPortfolioStreamFeedWithHttpInfo(apiVersion);
        }

        /// <summary>
        /// Portfolio Stream Feed This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPortfolioStreamFeedWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetPortfolioStreamFeed");

            var localVarPath = "/v2/feed/portfolio-stream-feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioStreamFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Portfolio Stream Feed This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPortfolioStreamFeedAsync (string apiVersion)
        {
             await GetPortfolioStreamFeedAsyncWithHttpInfo(apiVersion);

        }

        /// <summary>
        /// Portfolio Stream Feed This API redirects the client to the respective socket endpoint to receive Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPortfolioStreamFeedAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetPortfolioStreamFeed");

            var localVarPath = "/v2/feed/portfolio-stream-feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioStreamFeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Portfolio Stream Feed Authorize  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>WebsocketAuthRedirectResponse</returns>
        public WebsocketAuthRedirectResponse GetPortfolioStreamFeedAuthorize (string apiVersion)
        {
             ApiResponse<WebsocketAuthRedirectResponse> localVarResponse = GetPortfolioStreamFeedAuthorizeWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Portfolio Stream Feed Authorize  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>ApiResponse of WebsocketAuthRedirectResponse</returns>
        public ApiResponse< WebsocketAuthRedirectResponse > GetPortfolioStreamFeedAuthorizeWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetPortfolioStreamFeedAuthorize");

            var localVarPath = "/v2/feed/portfolio-stream-feed/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioStreamFeedAuthorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebsocketAuthRedirectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebsocketAuthRedirectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebsocketAuthRedirectResponse)));
        }

        /// <summary>
        /// Portfolio Stream Feed Authorize  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of WebsocketAuthRedirectResponse</returns>
        public async System.Threading.Tasks.Task<WebsocketAuthRedirectResponse> GetPortfolioStreamFeedAuthorizeAsync (string apiVersion)
        {
             ApiResponse<WebsocketAuthRedirectResponse> localVarResponse = await GetPortfolioStreamFeedAuthorizeAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Portfolio Stream Feed Authorize  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
        /// </summary>
        /// <exception cref="UpstoxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">API Version Header</param>
        /// <returns>Task of ApiResponse (WebsocketAuthRedirectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebsocketAuthRedirectResponse>> GetPortfolioStreamFeedAuthorizeAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling WebsocketApi->GetPortfolioStreamFeedAuthorize");

            var localVarPath = "/v2/feed/portfolio-stream-feed/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarHeaderParams.Add("Api-Version", this.Configuration.ApiClient.ParameterToString(apiVersion)); // header parameter
            // authentication (OAUTH2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioStreamFeedAuthorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebsocketAuthRedirectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebsocketAuthRedirectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebsocketAuthRedirectResponse)));
        }

    }
}
