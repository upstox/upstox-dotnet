/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for holiday list
    /// </summary>
    [DataContract]
        public partial class HolidayData :  IEquatable<HolidayData>, IValidatableObject
    {
        /// <summary>
        /// Defines HolidayType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum HolidayTypeEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,
            /// <summary>
            /// Enum SETTLEMENTHOLIDAY for value: SETTLEMENT_HOLIDAY
            /// </summary>
            [EnumMember(Value = "SETTLEMENT_HOLIDAY")]
            SETTLEMENTHOLIDAY = 2,
            /// <summary>
            /// Enum TRADINGHOLIDAY for value: TRADING_HOLIDAY
            /// </summary>
            [EnumMember(Value = "TRADING_HOLIDAY")]
            TRADINGHOLIDAY = 3,
            /// <summary>
            /// Enum SPECIALTIMING for value: SPECIAL_TIMING
            /// </summary>
            [EnumMember(Value = "SPECIAL_TIMING")]
            SPECIALTIMING = 4        }
        /// <summary>
        /// Gets or Sets HolidayType
        /// </summary>
        [DataMember(Name="holiday_type", EmitDefaultValue=false)]
        public HolidayTypeEnum? HolidayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HolidayData" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="holidayType">holidayType.</param>
        /// <param name="closedExchanges">closedExchanges.</param>
        /// <param name="openExchanges">openExchanges.</param>
        public HolidayData(DateTime? date = default(DateTime?), string description = default(string), HolidayTypeEnum? holidayType = default(HolidayTypeEnum?), List<string> closedExchanges = default(List<string>), List<ExchangeTimingData> openExchanges = default(List<ExchangeTimingData>))
        {
            this.Date = date;
            this.Description = description;
            this.HolidayType = holidayType;
            this.ClosedExchanges = closedExchanges;
            this.OpenExchanges = openExchanges;
        }
        
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Gets or Sets ClosedExchanges
        /// </summary>
        [DataMember(Name="closed_exchanges", EmitDefaultValue=false)]
        public List<string> ClosedExchanges { get; set; }

        /// <summary>
        /// Gets or Sets OpenExchanges
        /// </summary>
        [DataMember(Name="open_exchanges", EmitDefaultValue=false)]
        public List<ExchangeTimingData> OpenExchanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HolidayData {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HolidayType: ").Append(HolidayType).Append("\n");
            sb.Append("  ClosedExchanges: ").Append(ClosedExchanges).Append("\n");
            sb.Append("  OpenExchanges: ").Append(OpenExchanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HolidayData);
        }

        /// <summary>
        /// Returns true if HolidayData instances are equal
        /// </summary>
        /// <param name="input">Instance of HolidayData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HolidayData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HolidayType == input.HolidayType ||
                    (this.HolidayType != null &&
                    this.HolidayType.Equals(input.HolidayType))
                ) && 
                (
                    this.ClosedExchanges == input.ClosedExchanges ||
                    this.ClosedExchanges != null &&
                    input.ClosedExchanges != null &&
                    this.ClosedExchanges.SequenceEqual(input.ClosedExchanges)
                ) && 
                (
                    this.OpenExchanges == input.OpenExchanges ||
                    this.OpenExchanges != null &&
                    input.OpenExchanges != null &&
                    this.OpenExchanges.SequenceEqual(input.OpenExchanges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HolidayType != null)
                    hashCode = hashCode * 59 + this.HolidayType.GetHashCode();
                if (this.ClosedExchanges != null)
                    hashCode = hashCode * 59 + this.ClosedExchanges.GetHashCode();
                if (this.OpenExchanges != null)
                    hashCode = hashCode * 59 + this.OpenExchanges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
