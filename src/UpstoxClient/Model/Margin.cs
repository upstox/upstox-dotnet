/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for instrument margin details
    /// </summary>
    [DataContract]
        public partial class Margin :  IEquatable<Margin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Margin" /> class.
        /// </summary>
        public Margin()
        {
        }
        
        /// <summary>
        /// Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade
        /// </summary>
        /// <value>Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade</value>
        [DataMember(Name="span_margin", EmitDefaultValue=false)]
        public double? SpanMargin { get; private set; }

        /// <summary>
        /// Based on ELM percentage values provided by exchange, applicable on only FNO trade
        /// </summary>
        /// <value>Based on ELM percentage values provided by exchange, applicable on only FNO trade</value>
        [DataMember(Name="exposure_margin", EmitDefaultValue=false)]
        public double? ExposureMargin { get; private set; }

        /// <summary>
        /// Margin applicable for any equity trade
        /// </summary>
        /// <value>Margin applicable for any equity trade</value>
        [DataMember(Name="equity_margin", EmitDefaultValue=false)]
        public double? EquityMargin { get; private set; }

        /// <summary>
        /// Option premium required.
        /// </summary>
        /// <value>Option premium required.</value>
        [DataMember(Name="net_buy_premium", EmitDefaultValue=false)]
        public double? NetBuyPremium { get; private set; }

        /// <summary>
        /// Application margin applicable on MCX FNO trade for certain commodities
        /// </summary>
        /// <value>Application margin applicable on MCX FNO trade for certain commodities</value>
        [DataMember(Name="additional_margin", EmitDefaultValue=false)]
        public double? AdditionalMargin { get; private set; }

        /// <summary>
        /// Total margin required for the basket
        /// </summary>
        /// <value>Total margin required for the basket</value>
        [DataMember(Name="total_margin", EmitDefaultValue=false)]
        public double? TotalMargin { get; private set; }

        /// <summary>
        /// Tender margin
        /// </summary>
        /// <value>Tender margin</value>
        [DataMember(Name="tender_margin", EmitDefaultValue=false)]
        public double? TenderMargin { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Margin {\n");
            sb.Append("  SpanMargin: ").Append(SpanMargin).Append("\n");
            sb.Append("  ExposureMargin: ").Append(ExposureMargin).Append("\n");
            sb.Append("  EquityMargin: ").Append(EquityMargin).Append("\n");
            sb.Append("  NetBuyPremium: ").Append(NetBuyPremium).Append("\n");
            sb.Append("  AdditionalMargin: ").Append(AdditionalMargin).Append("\n");
            sb.Append("  TotalMargin: ").Append(TotalMargin).Append("\n");
            sb.Append("  TenderMargin: ").Append(TenderMargin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Margin);
        }

        /// <summary>
        /// Returns true if Margin instances are equal
        /// </summary>
        /// <param name="input">Instance of Margin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Margin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpanMargin == input.SpanMargin ||
                    (this.SpanMargin != null &&
                    this.SpanMargin.Equals(input.SpanMargin))
                ) && 
                (
                    this.ExposureMargin == input.ExposureMargin ||
                    (this.ExposureMargin != null &&
                    this.ExposureMargin.Equals(input.ExposureMargin))
                ) && 
                (
                    this.EquityMargin == input.EquityMargin ||
                    (this.EquityMargin != null &&
                    this.EquityMargin.Equals(input.EquityMargin))
                ) && 
                (
                    this.NetBuyPremium == input.NetBuyPremium ||
                    (this.NetBuyPremium != null &&
                    this.NetBuyPremium.Equals(input.NetBuyPremium))
                ) && 
                (
                    this.AdditionalMargin == input.AdditionalMargin ||
                    (this.AdditionalMargin != null &&
                    this.AdditionalMargin.Equals(input.AdditionalMargin))
                ) && 
                (
                    this.TotalMargin == input.TotalMargin ||
                    (this.TotalMargin != null &&
                    this.TotalMargin.Equals(input.TotalMargin))
                ) && 
                (
                    this.TenderMargin == input.TenderMargin ||
                    (this.TenderMargin != null &&
                    this.TenderMargin.Equals(input.TenderMargin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpanMargin != null)
                    hashCode = hashCode * 59 + this.SpanMargin.GetHashCode();
                if (this.ExposureMargin != null)
                    hashCode = hashCode * 59 + this.ExposureMargin.GetHashCode();
                if (this.EquityMargin != null)
                    hashCode = hashCode * 59 + this.EquityMargin.GetHashCode();
                if (this.NetBuyPremium != null)
                    hashCode = hashCode * 59 + this.NetBuyPremium.GetHashCode();
                if (this.AdditionalMargin != null)
                    hashCode = hashCode * 59 + this.AdditionalMargin.GetHashCode();
                if (this.TotalMargin != null)
                    hashCode = hashCode * 59 + this.TotalMargin.GetHashCode();
                if (this.TenderMargin != null)
                    hashCode = hashCode * 59 + this.TenderMargin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
