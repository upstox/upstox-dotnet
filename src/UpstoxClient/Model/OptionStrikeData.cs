/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for option chain data
    /// </summary>
    [DataContract]
        public partial class OptionStrikeData :  IEquatable<OptionStrikeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionStrikeData" /> class.
        /// </summary>
        /// <param name="expiry">expiry.</param>
        /// <param name="pcr">pcr.</param>
        /// <param name="strikePrice">strikePrice.</param>
        /// <param name="underlyingKey">underlyingKey.</param>
        /// <param name="underlyingSpotPrice">underlyingSpotPrice.</param>
        /// <param name="callOptions">callOptions.</param>
        /// <param name="putOptions">putOptions.</param>
        public OptionStrikeData(DateTime? expiry = default(DateTime?), double? pcr = default(double?), double? strikePrice = default(double?), string underlyingKey = default(string), double? underlyingSpotPrice = default(double?), PutCallOptionChainData callOptions = default(PutCallOptionChainData), PutCallOptionChainData putOptions = default(PutCallOptionChainData))
        {
            this.Expiry = expiry;
            this.Pcr = pcr;
            this.StrikePrice = strikePrice;
            this.UnderlyingKey = underlyingKey;
            this.UnderlyingSpotPrice = underlyingSpotPrice;
            this.CallOptions = callOptions;
            this.PutOptions = putOptions;
        }
        
        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Pcr
        /// </summary>
        [DataMember(Name="pcr", EmitDefaultValue=false)]
        public double? Pcr { get; set; }

        /// <summary>
        /// Gets or Sets StrikePrice
        /// </summary>
        [DataMember(Name="strike_price", EmitDefaultValue=false)]
        public double? StrikePrice { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingKey
        /// </summary>
        [DataMember(Name="underlying_key", EmitDefaultValue=false)]
        public string UnderlyingKey { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingSpotPrice
        /// </summary>
        [DataMember(Name="underlying_spot_price", EmitDefaultValue=false)]
        public double? UnderlyingSpotPrice { get; set; }

        /// <summary>
        /// Gets or Sets CallOptions
        /// </summary>
        [DataMember(Name="call_options", EmitDefaultValue=false)]
        public PutCallOptionChainData CallOptions { get; set; }

        /// <summary>
        /// Gets or Sets PutOptions
        /// </summary>
        [DataMember(Name="put_options", EmitDefaultValue=false)]
        public PutCallOptionChainData PutOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionStrikeData {\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Pcr: ").Append(Pcr).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  UnderlyingKey: ").Append(UnderlyingKey).Append("\n");
            sb.Append("  UnderlyingSpotPrice: ").Append(UnderlyingSpotPrice).Append("\n");
            sb.Append("  CallOptions: ").Append(CallOptions).Append("\n");
            sb.Append("  PutOptions: ").Append(PutOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionStrikeData);
        }

        /// <summary>
        /// Returns true if OptionStrikeData instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionStrikeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionStrikeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Pcr == input.Pcr ||
                    (this.Pcr != null &&
                    this.Pcr.Equals(input.Pcr))
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                ) && 
                (
                    this.UnderlyingKey == input.UnderlyingKey ||
                    (this.UnderlyingKey != null &&
                    this.UnderlyingKey.Equals(input.UnderlyingKey))
                ) && 
                (
                    this.UnderlyingSpotPrice == input.UnderlyingSpotPrice ||
                    (this.UnderlyingSpotPrice != null &&
                    this.UnderlyingSpotPrice.Equals(input.UnderlyingSpotPrice))
                ) && 
                (
                    this.CallOptions == input.CallOptions ||
                    (this.CallOptions != null &&
                    this.CallOptions.Equals(input.CallOptions))
                ) && 
                (
                    this.PutOptions == input.PutOptions ||
                    (this.PutOptions != null &&
                    this.PutOptions.Equals(input.PutOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Pcr != null)
                    hashCode = hashCode * 59 + this.Pcr.GetHashCode();
                if (this.StrikePrice != null)
                    hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                if (this.UnderlyingKey != null)
                    hashCode = hashCode * 59 + this.UnderlyingKey.GetHashCode();
                if (this.UnderlyingSpotPrice != null)
                    hashCode = hashCode * 59 + this.UnderlyingSpotPrice.GetHashCode();
                if (this.CallOptions != null)
                    hashCode = hashCode * 59 + this.CallOptions.GetHashCode();
                if (this.PutOptions != null)
                    hashCode = hashCode * 59 + this.PutOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
