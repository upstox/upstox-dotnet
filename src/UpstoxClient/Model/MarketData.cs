/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// MarketData
    /// </summary>
    [DataContract]
        public partial class MarketData :  IEquatable<MarketData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketData" /> class.
        /// </summary>
        /// <param name="ltp">ltp.</param>
        /// <param name="volume">volume.</param>
        /// <param name="oi">oi.</param>
        /// <param name="closePrice">closePrice.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="bidQty">bidQty.</param>
        /// <param name="askPrice">askPrice.</param>
        /// <param name="askQty">askQty.</param>
        /// <param name="prevOi">prevOi.</param>
        public MarketData(double? ltp = default(double?), long? volume = default(long?), double? oi = default(double?), double? closePrice = default(double?), double? bidPrice = default(double?), int? bidQty = default(int?), double? askPrice = default(double?), int? askQty = default(int?), double? prevOi = default(double?))
        {
            this.Ltp = ltp;
            this.Volume = volume;
            this.Oi = oi;
            this.ClosePrice = closePrice;
            this.BidPrice = bidPrice;
            this.BidQty = bidQty;
            this.AskPrice = askPrice;
            this.AskQty = askQty;
            this.PrevOi = prevOi;
        }
        
        /// <summary>
        /// Gets or Sets Ltp
        /// </summary>
        [DataMember(Name="ltp", EmitDefaultValue=false)]
        public double? Ltp { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public long? Volume { get; set; }

        /// <summary>
        /// Gets or Sets Oi
        /// </summary>
        [DataMember(Name="oi", EmitDefaultValue=false)]
        public double? Oi { get; set; }

        /// <summary>
        /// Gets or Sets ClosePrice
        /// </summary>
        [DataMember(Name="close_price", EmitDefaultValue=false)]
        public double? ClosePrice { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="bid_price", EmitDefaultValue=false)]
        public double? BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets BidQty
        /// </summary>
        [DataMember(Name="bid_qty", EmitDefaultValue=false)]
        public int? BidQty { get; set; }

        /// <summary>
        /// Gets or Sets AskPrice
        /// </summary>
        [DataMember(Name="ask_price", EmitDefaultValue=false)]
        public double? AskPrice { get; set; }

        /// <summary>
        /// Gets or Sets AskQty
        /// </summary>
        [DataMember(Name="ask_qty", EmitDefaultValue=false)]
        public int? AskQty { get; set; }

        /// <summary>
        /// Gets or Sets PrevOi
        /// </summary>
        [DataMember(Name="prev_oi", EmitDefaultValue=false)]
        public double? PrevOi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketData {\n");
            sb.Append("  Ltp: ").Append(Ltp).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Oi: ").Append(Oi).Append("\n");
            sb.Append("  ClosePrice: ").Append(ClosePrice).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  BidQty: ").Append(BidQty).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  AskQty: ").Append(AskQty).Append("\n");
            sb.Append("  PrevOi: ").Append(PrevOi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketData);
        }

        /// <summary>
        /// Returns true if MarketData instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ltp == input.Ltp ||
                    (this.Ltp != null &&
                    this.Ltp.Equals(input.Ltp))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Oi == input.Oi ||
                    (this.Oi != null &&
                    this.Oi.Equals(input.Oi))
                ) && 
                (
                    this.ClosePrice == input.ClosePrice ||
                    (this.ClosePrice != null &&
                    this.ClosePrice.Equals(input.ClosePrice))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.BidQty == input.BidQty ||
                    (this.BidQty != null &&
                    this.BidQty.Equals(input.BidQty))
                ) && 
                (
                    this.AskPrice == input.AskPrice ||
                    (this.AskPrice != null &&
                    this.AskPrice.Equals(input.AskPrice))
                ) && 
                (
                    this.AskQty == input.AskQty ||
                    (this.AskQty != null &&
                    this.AskQty.Equals(input.AskQty))
                ) && 
                (
                    this.PrevOi == input.PrevOi ||
                    (this.PrevOi != null &&
                    this.PrevOi.Equals(input.PrevOi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ltp != null)
                    hashCode = hashCode * 59 + this.Ltp.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Oi != null)
                    hashCode = hashCode * 59 + this.Oi.GetHashCode();
                if (this.ClosePrice != null)
                    hashCode = hashCode * 59 + this.ClosePrice.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.BidQty != null)
                    hashCode = hashCode * 59 + this.BidQty.GetHashCode();
                if (this.AskPrice != null)
                    hashCode = hashCode * 59 + this.AskPrice.GetHashCode();
                if (this.AskQty != null)
                    hashCode = hashCode * 59 + this.AskQty.GetHashCode();
                if (this.PrevOi != null)
                    hashCode = hashCode * 59 + this.PrevOi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
