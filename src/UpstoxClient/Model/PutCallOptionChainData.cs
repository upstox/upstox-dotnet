/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// PutCallOptionChainData
    /// </summary>
    [DataContract]
        public partial class PutCallOptionChainData :  IEquatable<PutCallOptionChainData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutCallOptionChainData" /> class.
        /// </summary>
        /// <param name="instrumentKey">instrumentKey.</param>
        /// <param name="marketData">marketData.</param>
        /// <param name="optionGreeks">optionGreeks.</param>
        public PutCallOptionChainData(string instrumentKey = default(string), MarketData marketData = default(MarketData), AnalyticsData optionGreeks = default(AnalyticsData))
        {
            this.InstrumentKey = instrumentKey;
            this.MarketData = marketData;
            this.OptionGreeks = optionGreeks;
        }
        
        /// <summary>
        /// Gets or Sets InstrumentKey
        /// </summary>
        [DataMember(Name="instrument_key", EmitDefaultValue=false)]
        public string InstrumentKey { get; set; }

        /// <summary>
        /// Gets or Sets MarketData
        /// </summary>
        [DataMember(Name="market_data", EmitDefaultValue=false)]
        public MarketData MarketData { get; set; }

        /// <summary>
        /// Gets or Sets OptionGreeks
        /// </summary>
        [DataMember(Name="option_greeks", EmitDefaultValue=false)]
        public AnalyticsData OptionGreeks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutCallOptionChainData {\n");
            sb.Append("  InstrumentKey: ").Append(InstrumentKey).Append("\n");
            sb.Append("  MarketData: ").Append(MarketData).Append("\n");
            sb.Append("  OptionGreeks: ").Append(OptionGreeks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutCallOptionChainData);
        }

        /// <summary>
        /// Returns true if PutCallOptionChainData instances are equal
        /// </summary>
        /// <param name="input">Instance of PutCallOptionChainData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutCallOptionChainData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstrumentKey == input.InstrumentKey ||
                    (this.InstrumentKey != null &&
                    this.InstrumentKey.Equals(input.InstrumentKey))
                ) && 
                (
                    this.MarketData == input.MarketData ||
                    (this.MarketData != null &&
                    this.MarketData.Equals(input.MarketData))
                ) && 
                (
                    this.OptionGreeks == input.OptionGreeks ||
                    (this.OptionGreeks != null &&
                    this.OptionGreeks.Equals(input.OptionGreeks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentKey != null)
                    hashCode = hashCode * 59 + this.InstrumentKey.GetHashCode();
                if (this.MarketData != null)
                    hashCode = hashCode * 59 + this.MarketData.GetHashCode();
                if (this.OptionGreeks != null)
                    hashCode = hashCode * 59 + this.OptionGreeks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
