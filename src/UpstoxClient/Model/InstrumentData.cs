/* 
 * OpenAPI definition
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UpstoxClient.Client.SwaggerDateConverter;
namespace UpstoxClient.Model
{
    /// <summary>
    /// Response data for option contracts
    /// </summary>
    [DataContract]
        public partial class InstrumentData :  IEquatable<InstrumentData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentData" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="segment">segment.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="isin">isin.</param>
        /// <param name="expiry">expiry.</param>
        /// <param name="country">country.</param>
        /// <param name="latency">latency.</param>
        /// <param name="description">description.</param>
        /// <param name="currency">currency.</param>
        /// <param name="weekly">weekly.</param>
        /// <param name="instrumentKey">instrumentKey.</param>
        /// <param name="exchangeToken">exchangeToken.</param>
        /// <param name="tradingSymbol">tradingSymbol.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="tickSize">tickSize.</param>
        /// <param name="lotSize">lotSize.</param>
        /// <param name="instrumentType">instrumentType.</param>
        /// <param name="freezeQuantity">freezeQuantity.</param>
        /// <param name="underlyingKey">underlyingKey.</param>
        /// <param name="underlyingType">underlyingType.</param>
        /// <param name="underlyingSymbol">underlyingSymbol.</param>
        /// <param name="lastTradingDate">lastTradingDate.</param>
        /// <param name="strikePrice">strikePrice.</param>
        /// <param name="priceQuoteUnit">priceQuoteUnit.</param>
        /// <param name="qtyMultiplier">qtyMultiplier.</param>
        /// <param name="minimumLot">minimumLot.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="weekDays">weekDays.</param>
        /// <param name="generalDenominator">generalDenominator.</param>
        /// <param name="generalNumerator">generalNumerator.</param>
        /// <param name="priceNumerator">priceNumerator.</param>
        /// <param name="priceDenominator">priceDenominator.</param>
        /// <param name="mtfEnabled">mtfEnabled.</param>
        /// <param name="mtfBracket">mtfBracket.</param>
        /// <param name="securityType">securityType.</param>
        public InstrumentData(string name = default(string), string segment = default(string), string exchange = default(string), string isin = default(string), DateTime? expiry = default(DateTime?), string country = default(string), string latency = default(string), string description = default(string), string currency = default(string), bool? weekly = default(bool?), string instrumentKey = default(string), string exchangeToken = default(string), string tradingSymbol = default(string), string shortName = default(string), double? tickSize = default(double?), long? lotSize = default(long?), string instrumentType = default(string), double? freezeQuantity = default(double?), string underlyingKey = default(string), string underlyingType = default(string), string underlyingSymbol = default(string), DateTime? lastTradingDate = default(DateTime?), double? strikePrice = default(double?), string priceQuoteUnit = default(string), long? qtyMultiplier = default(long?), long? minimumLot = default(long?), string startTime = default(string), string endTime = default(string), string weekDays = default(string), double? generalDenominator = default(double?), double? generalNumerator = default(double?), double? priceNumerator = default(double?), double? priceDenominator = default(double?), bool? mtfEnabled = default(bool?), double? mtfBracket = default(double?), string securityType = default(string))
        {
            this.Name = name;
            this.Segment = segment;
            this.Exchange = exchange;
            this.Isin = isin;
            this.Expiry = expiry;
            this.Country = country;
            this.Latency = latency;
            this.Description = description;
            this.Currency = currency;
            this.Weekly = weekly;
            this.InstrumentKey = instrumentKey;
            this.ExchangeToken = exchangeToken;
            this.TradingSymbol = tradingSymbol;
            this.ShortName = shortName;
            this.TickSize = tickSize;
            this.LotSize = lotSize;
            this.InstrumentType = instrumentType;
            this.FreezeQuantity = freezeQuantity;
            this.UnderlyingKey = underlyingKey;
            this.UnderlyingType = underlyingType;
            this.UnderlyingSymbol = underlyingSymbol;
            this.LastTradingDate = lastTradingDate;
            this.StrikePrice = strikePrice;
            this.PriceQuoteUnit = priceQuoteUnit;
            this.QtyMultiplier = qtyMultiplier;
            this.MinimumLot = minimumLot;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.WeekDays = weekDays;
            this.GeneralDenominator = generalDenominator;
            this.GeneralNumerator = generalNumerator;
            this.PriceNumerator = priceNumerator;
            this.PriceDenominator = priceDenominator;
            this.MtfEnabled = mtfEnabled;
            this.MtfBracket = mtfBracket;
            this.SecurityType = securityType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name="segment", EmitDefaultValue=false)]
        public string Segment { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets Isin
        /// </summary>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Latency
        /// </summary>
        [DataMember(Name="latency", EmitDefaultValue=false)]
        public string Latency { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Weekly
        /// </summary>
        [DataMember(Name="weekly", EmitDefaultValue=false)]
        public bool? Weekly { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentKey
        /// </summary>
        [DataMember(Name="instrument_key", EmitDefaultValue=false)]
        public string InstrumentKey { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeToken
        /// </summary>
        [DataMember(Name="exchange_token", EmitDefaultValue=false)]
        public string ExchangeToken { get; set; }

        /// <summary>
        /// Gets or Sets TradingSymbol
        /// </summary>
        [DataMember(Name="trading_symbol", EmitDefaultValue=false)]
        public string TradingSymbol { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="short_name", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets TickSize
        /// </summary>
        [DataMember(Name="tick_size", EmitDefaultValue=false)]
        public double? TickSize { get; set; }

        /// <summary>
        /// Gets or Sets LotSize
        /// </summary>
        [DataMember(Name="lot_size", EmitDefaultValue=false)]
        public long? LotSize { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentType
        /// </summary>
        [DataMember(Name="instrument_type", EmitDefaultValue=false)]
        public string InstrumentType { get; set; }

        /// <summary>
        /// Gets or Sets FreezeQuantity
        /// </summary>
        [DataMember(Name="freeze_quantity", EmitDefaultValue=false)]
        public double? FreezeQuantity { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingKey
        /// </summary>
        [DataMember(Name="underlying_key", EmitDefaultValue=false)]
        public string UnderlyingKey { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingType
        /// </summary>
        [DataMember(Name="underlying_type", EmitDefaultValue=false)]
        public string UnderlyingType { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingSymbol
        /// </summary>
        [DataMember(Name="underlying_symbol", EmitDefaultValue=false)]
        public string UnderlyingSymbol { get; set; }

        /// <summary>
        /// Gets or Sets LastTradingDate
        /// </summary>
        [DataMember(Name="last_trading_date", EmitDefaultValue=false)]
        public DateTime? LastTradingDate { get; set; }

        /// <summary>
        /// Gets or Sets StrikePrice
        /// </summary>
        [DataMember(Name="strike_price", EmitDefaultValue=false)]
        public double? StrikePrice { get; set; }

        /// <summary>
        /// Gets or Sets PriceQuoteUnit
        /// </summary>
        [DataMember(Name="price_quote_unit", EmitDefaultValue=false)]
        public string PriceQuoteUnit { get; set; }

        /// <summary>
        /// Gets or Sets QtyMultiplier
        /// </summary>
        [DataMember(Name="qty_multiplier", EmitDefaultValue=false)]
        public long? QtyMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets MinimumLot
        /// </summary>
        [DataMember(Name="minimum_lot", EmitDefaultValue=false)]
        public long? MinimumLot { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets WeekDays
        /// </summary>
        [DataMember(Name="week_days", EmitDefaultValue=false)]
        public string WeekDays { get; set; }

        /// <summary>
        /// Gets or Sets GeneralDenominator
        /// </summary>
        [DataMember(Name="general_denominator", EmitDefaultValue=false)]
        public double? GeneralDenominator { get; set; }

        /// <summary>
        /// Gets or Sets GeneralNumerator
        /// </summary>
        [DataMember(Name="general_numerator", EmitDefaultValue=false)]
        public double? GeneralNumerator { get; set; }

        /// <summary>
        /// Gets or Sets PriceNumerator
        /// </summary>
        [DataMember(Name="price_numerator", EmitDefaultValue=false)]
        public double? PriceNumerator { get; set; }

        /// <summary>
        /// Gets or Sets PriceDenominator
        /// </summary>
        [DataMember(Name="price_denominator", EmitDefaultValue=false)]
        public double? PriceDenominator { get; set; }

        /// <summary>
        /// Gets or Sets MtfEnabled
        /// </summary>
        [DataMember(Name="mtf_enabled", EmitDefaultValue=false)]
        public bool? MtfEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MtfBracket
        /// </summary>
        [DataMember(Name="mtf_bracket", EmitDefaultValue=false)]
        public double? MtfBracket { get; set; }

        /// <summary>
        /// Gets or Sets SecurityType
        /// </summary>
        [DataMember(Name="security_type", EmitDefaultValue=false)]
        public string SecurityType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstrumentData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Latency: ").Append(Latency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Weekly: ").Append(Weekly).Append("\n");
            sb.Append("  InstrumentKey: ").Append(InstrumentKey).Append("\n");
            sb.Append("  ExchangeToken: ").Append(ExchangeToken).Append("\n");
            sb.Append("  TradingSymbol: ").Append(TradingSymbol).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  LotSize: ").Append(LotSize).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  FreezeQuantity: ").Append(FreezeQuantity).Append("\n");
            sb.Append("  UnderlyingKey: ").Append(UnderlyingKey).Append("\n");
            sb.Append("  UnderlyingType: ").Append(UnderlyingType).Append("\n");
            sb.Append("  UnderlyingSymbol: ").Append(UnderlyingSymbol).Append("\n");
            sb.Append("  LastTradingDate: ").Append(LastTradingDate).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  PriceQuoteUnit: ").Append(PriceQuoteUnit).Append("\n");
            sb.Append("  QtyMultiplier: ").Append(QtyMultiplier).Append("\n");
            sb.Append("  MinimumLot: ").Append(MinimumLot).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  WeekDays: ").Append(WeekDays).Append("\n");
            sb.Append("  GeneralDenominator: ").Append(GeneralDenominator).Append("\n");
            sb.Append("  GeneralNumerator: ").Append(GeneralNumerator).Append("\n");
            sb.Append("  PriceNumerator: ").Append(PriceNumerator).Append("\n");
            sb.Append("  PriceDenominator: ").Append(PriceDenominator).Append("\n");
            sb.Append("  MtfEnabled: ").Append(MtfEnabled).Append("\n");
            sb.Append("  MtfBracket: ").Append(MtfBracket).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentData);
        }

        /// <summary>
        /// Returns true if InstrumentData instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Segment == input.Segment ||
                    (this.Segment != null &&
                    this.Segment.Equals(input.Segment))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Latency == input.Latency ||
                    (this.Latency != null &&
                    this.Latency.Equals(input.Latency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Weekly == input.Weekly ||
                    (this.Weekly != null &&
                    this.Weekly.Equals(input.Weekly))
                ) && 
                (
                    this.InstrumentKey == input.InstrumentKey ||
                    (this.InstrumentKey != null &&
                    this.InstrumentKey.Equals(input.InstrumentKey))
                ) && 
                (
                    this.ExchangeToken == input.ExchangeToken ||
                    (this.ExchangeToken != null &&
                    this.ExchangeToken.Equals(input.ExchangeToken))
                ) && 
                (
                    this.TradingSymbol == input.TradingSymbol ||
                    (this.TradingSymbol != null &&
                    this.TradingSymbol.Equals(input.TradingSymbol))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.TickSize == input.TickSize ||
                    (this.TickSize != null &&
                    this.TickSize.Equals(input.TickSize))
                ) && 
                (
                    this.LotSize == input.LotSize ||
                    (this.LotSize != null &&
                    this.LotSize.Equals(input.LotSize))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                ) && 
                (
                    this.FreezeQuantity == input.FreezeQuantity ||
                    (this.FreezeQuantity != null &&
                    this.FreezeQuantity.Equals(input.FreezeQuantity))
                ) && 
                (
                    this.UnderlyingKey == input.UnderlyingKey ||
                    (this.UnderlyingKey != null &&
                    this.UnderlyingKey.Equals(input.UnderlyingKey))
                ) && 
                (
                    this.UnderlyingType == input.UnderlyingType ||
                    (this.UnderlyingType != null &&
                    this.UnderlyingType.Equals(input.UnderlyingType))
                ) && 
                (
                    this.UnderlyingSymbol == input.UnderlyingSymbol ||
                    (this.UnderlyingSymbol != null &&
                    this.UnderlyingSymbol.Equals(input.UnderlyingSymbol))
                ) && 
                (
                    this.LastTradingDate == input.LastTradingDate ||
                    (this.LastTradingDate != null &&
                    this.LastTradingDate.Equals(input.LastTradingDate))
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                ) && 
                (
                    this.PriceQuoteUnit == input.PriceQuoteUnit ||
                    (this.PriceQuoteUnit != null &&
                    this.PriceQuoteUnit.Equals(input.PriceQuoteUnit))
                ) && 
                (
                    this.QtyMultiplier == input.QtyMultiplier ||
                    (this.QtyMultiplier != null &&
                    this.QtyMultiplier.Equals(input.QtyMultiplier))
                ) && 
                (
                    this.MinimumLot == input.MinimumLot ||
                    (this.MinimumLot != null &&
                    this.MinimumLot.Equals(input.MinimumLot))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.WeekDays == input.WeekDays ||
                    (this.WeekDays != null &&
                    this.WeekDays.Equals(input.WeekDays))
                ) && 
                (
                    this.GeneralDenominator == input.GeneralDenominator ||
                    (this.GeneralDenominator != null &&
                    this.GeneralDenominator.Equals(input.GeneralDenominator))
                ) && 
                (
                    this.GeneralNumerator == input.GeneralNumerator ||
                    (this.GeneralNumerator != null &&
                    this.GeneralNumerator.Equals(input.GeneralNumerator))
                ) && 
                (
                    this.PriceNumerator == input.PriceNumerator ||
                    (this.PriceNumerator != null &&
                    this.PriceNumerator.Equals(input.PriceNumerator))
                ) && 
                (
                    this.PriceDenominator == input.PriceDenominator ||
                    (this.PriceDenominator != null &&
                    this.PriceDenominator.Equals(input.PriceDenominator))
                ) && 
                (
                    this.MtfEnabled == input.MtfEnabled ||
                    (this.MtfEnabled != null &&
                    this.MtfEnabled.Equals(input.MtfEnabled))
                ) && 
                (
                    this.MtfBracket == input.MtfBracket ||
                    (this.MtfBracket != null &&
                    this.MtfBracket.Equals(input.MtfBracket))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    (this.SecurityType != null &&
                    this.SecurityType.Equals(input.SecurityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Segment != null)
                    hashCode = hashCode * 59 + this.Segment.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Latency != null)
                    hashCode = hashCode * 59 + this.Latency.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Weekly != null)
                    hashCode = hashCode * 59 + this.Weekly.GetHashCode();
                if (this.InstrumentKey != null)
                    hashCode = hashCode * 59 + this.InstrumentKey.GetHashCode();
                if (this.ExchangeToken != null)
                    hashCode = hashCode * 59 + this.ExchangeToken.GetHashCode();
                if (this.TradingSymbol != null)
                    hashCode = hashCode * 59 + this.TradingSymbol.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.TickSize != null)
                    hashCode = hashCode * 59 + this.TickSize.GetHashCode();
                if (this.LotSize != null)
                    hashCode = hashCode * 59 + this.LotSize.GetHashCode();
                if (this.InstrumentType != null)
                    hashCode = hashCode * 59 + this.InstrumentType.GetHashCode();
                if (this.FreezeQuantity != null)
                    hashCode = hashCode * 59 + this.FreezeQuantity.GetHashCode();
                if (this.UnderlyingKey != null)
                    hashCode = hashCode * 59 + this.UnderlyingKey.GetHashCode();
                if (this.UnderlyingType != null)
                    hashCode = hashCode * 59 + this.UnderlyingType.GetHashCode();
                if (this.UnderlyingSymbol != null)
                    hashCode = hashCode * 59 + this.UnderlyingSymbol.GetHashCode();
                if (this.LastTradingDate != null)
                    hashCode = hashCode * 59 + this.LastTradingDate.GetHashCode();
                if (this.StrikePrice != null)
                    hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                if (this.PriceQuoteUnit != null)
                    hashCode = hashCode * 59 + this.PriceQuoteUnit.GetHashCode();
                if (this.QtyMultiplier != null)
                    hashCode = hashCode * 59 + this.QtyMultiplier.GetHashCode();
                if (this.MinimumLot != null)
                    hashCode = hashCode * 59 + this.MinimumLot.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.WeekDays != null)
                    hashCode = hashCode * 59 + this.WeekDays.GetHashCode();
                if (this.GeneralDenominator != null)
                    hashCode = hashCode * 59 + this.GeneralDenominator.GetHashCode();
                if (this.GeneralNumerator != null)
                    hashCode = hashCode * 59 + this.GeneralNumerator.GetHashCode();
                if (this.PriceNumerator != null)
                    hashCode = hashCode * 59 + this.PriceNumerator.GetHashCode();
                if (this.PriceDenominator != null)
                    hashCode = hashCode * 59 + this.PriceDenominator.GetHashCode();
                if (this.MtfEnabled != null)
                    hashCode = hashCode * 59 + this.MtfEnabled.GetHashCode();
                if (this.MtfBracket != null)
                    hashCode = hashCode * 59 + this.MtfBracket.GetHashCode();
                if (this.SecurityType != null)
                    hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
